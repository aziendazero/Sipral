<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="visiteMediche">


	<start-state name="start-state1">
		<transition to="VisitaExists?"></transition>
	</start-state>


	<super-state name="super-state2">
		<node name="create">
			<event type="node-enter">
				<action name="1" expression="#{AttivitaAction.create()}"></action>
			</event>
			<transition to="../eject"></transition>
		</node>
	</super-state>

	<decision name="next from edit?" expression="#{(button.getMnemonic())}">
		<transition to="Prestazioni" name="addPrest"></transition>
		<transition to="delPrestazione" name="delPrest"></transition>
		<transition to="set target source" name="MedicDelete"></transition>
		<transition to="set target source" name="MedicDetail"></transition>
		<transition to="set target source" name="MedicAdd"></transition>
		<transition to="Prestazioni new" name="addPrestReg"></transition>
		<transition to="del prestazione new" name="delPrestReg"></transition>
	</decision>

	<node name="delPrestazione">
		<event type="node-enter">
			<action name="1" expression="#{VisitaMedica.getPrestazioniICD9().remove(CodeValueIcd9)}"></action>
		</event>
		<transition to="super-state2/create"></transition>
	</node>

	<process-state name="medici">
		<sub-process name="MOD_home/CORE/PROCESSES/Utility/Pratiche/MP/medici" binding="late"></sub-process>
		<transition to="unset target source"></transition>
	</process-state>

	<node name="set target source">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.temporary.put('sourceAction',VisitaMedicaAction)}"></action>
			<action name="2" expression="#{PhysicianAction.temporary.put('targetObj',VisitaMedica.medico)}"></action>
			<action name="3" expression="#{PhysicianAction.temporary.put('targetBinding','medico')}"></action>
		</event>
		<transition to="medici"></transition>
	</node>

	<node name="unset target source">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.temporary.remove('sourceAction')}"></action>
			<action name="2" expression="#{PhysicianAction.temporary.remove('targetObj')}"></action>
			<action name="3" expression="#{PhysicianAction.temporary.remove('targetBinding')}"></action>
		</event>
		<transition to="super-state2/create"></transition>
	</node>

	<node name="Inject Visita">
		<event type="node-enter">
			<action name="1" expression="#{VisitaMedicaAction.inject(Attivita.visitaMedica)}"></action>
		</event>
		<transition to="next from edit?"></transition>
	</node>

	<process-state name="Prestazioni">
		<sub-process name="MOD_home/CORE/PROCESSES/Utility/Attivita/prestazioni" binding="late"></sub-process>
		<transition to="super-state2/create"></transition>
	</process-state>

	<decision name="VisitaExists?" expression="#{Attivita.visitaMedica!=null}">
		<transition to="super-state1/CreateVisita" name="false"></transition>
		<transition to="Inject Visita" name="true"></transition>
	</decision>

	<super-state name="super-state1">
		<node name="CreateVisita">
			<event type="node-enter">
				<action name="1" expression="#{VisitaMedicaAction.inject(VisitaMedicaAction.newEntity())}"></action>
				<action name="2" expression="#{AttivitaAction.link('visitaMedica',VisitaMedica)}"></action>
			</event>
			<transition to="../next from edit?"></transition>
		</node>
	</super-state>

	<node name="eject">
		<event type="node-enter">
			<action name="1" expression="#{VisitaMedicaAction.eject()}"></action>
			<action name="2" expression="#{PhysicianAction.eject()}"></action>
			<action name="3" expression="#{CodeValueIcd9Action.eject()}"></action>
			<action name="4" expression="#{CodeValueIcd9Action.ejectList()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="Prestazioni new">
		<event type="node-enter">
			<action name="1" expression="#{VisitaMedica.addPrestazioniReg(PrestazioniReg)}"></action>
		</event>
		<transition to="super-state2/create"></transition>
	</node>

	<node name="del prestazione new">
		<event type="node-enter">
			<action name="1" expression="#{VisitaMedica.removePrestazioniReg(PrestazioniReg)}"></action>
		</event>
		<transition to="super-state2/create"></transition>
	</node>


	<end-state name="end-state1"></end-state>


</process-definition>