<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="preActions">


	<start-state name="start-state1">
		<transition to="Inject Vigilanza"></transition>
	</start-state>


	<node name="Inject Vigilanza">
		<event type="node-enter">
			<action name="1" expression="#{VigilanzaAction.refresh()}"></action>
			<action name="2" expression="#{VigilanzaAction.inject(Procpratiche.vigilanza)}"></action>
		</event>
		<transition to="isVigilanza?"></transition>
	</node>

	<decision name="isVigilanza?" expression="#{not empty Vigilanza}">
		<transition to="super-state1/newEntity" name="false"></transition>
		<transition to="super-state2/checkDitteCantiere" name="true"></transition>
	</decision>

	<node name="injectAll">
		<event type="node-enter">
			<action name="1" expression="#{CommittenteAction.equal.put('isActive', true)}"></action>
			<action name="2" expression="#{not empty Cantiere ? CommittenteAction.equal.put('cantiere.internalId', Cantiere.internalId) : CommittenteAction.equal.put('cantiere.internalId', -1)}"></action>
			<action name="3" expression="#{CommittenteAction.read()}"></action>
			<action name="4" expression="#{CommittenteAction.injectEmptyList('ToRemoveCommittenteList')}"></action>
			<action name="5" expression="#{PersoneCantiereAction.equal.put('isActive',true)}"></action>
			<action name="6" expression="#{not empty Cantiere ? PersoneCantiereAction.equal.put('cantiere.internalId',Cantiere.internalId) : PersoneCantiereAction.equal.put('cantiere.internalId', -1)}"></action>
			<action name="7" expression="#{PersoneCantiereAction.equal.put('ruolo.code','RUOLOCANT01')}"></action>
			<action name="8" expression="#{PersoneCantiereAction.injectList(PersoneCantiereAction.select(),'PersoneCantiere1List')}"></action>
			<action name="9" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere1List')}"></action>
			<action name="10" expression="#{PersoneCantiereAction.equal.put('ruolo.code','RUOLOCANT02')}"></action>
			<action name="11" expression="#{PersoneCantiereAction.injectList(PersoneCantiereAction.select(),'PersoneCantiere2List')}"></action>
			<action name="12" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere2List')}"></action>
			<action name="13" expression="#{PersoneCantiereAction.equal.put('ruolo.code','RUOLOCANT03')}"></action>
			<action name="14" expression="#{PersoneCantiereAction.injectList(PersoneCantiereAction.select(),'PersoneCantiere3List')}"></action>
			<action name="15" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere3List')}"></action>
			<action name="16" expression="#{not empty Cantiere ? DitteCantiereAction.equal.put('cantiere.internalId',Cantiere.internalId) : DitteCantiereAction.equal.put('cantiere.internalId',-1)}"></action>
			<action name="17" expression="#{DitteCantiereAction.read()}"></action>
			<action name="18" expression="#{TagCantiereAction.equal.put('isActive',true)}"></action>
			<action name="19" expression="#{not empty Cantiere ? TagCantiereAction.equal.put('cantiere.internalId',Cantiere.internalId) : TagCantiereAction.equal.put('cantiere.internalId',-1)}"></action>
			<action name="20" expression="#{TagCantiereAction.read()}"></action>
			<action name="21" expression="#{TagCantiereAction.injectEmptyList('ToRemoveTagCantiereList')}"></action>
			<action name="22" expression="#{PersonaGiuridicaSedeAction.injectList(Vigilanza.personaGiuridicaSede)}"></action>
			<action name="23" expression="#{PersonaGiuridicaSedeAction.injectFirst()}"></action>
			<action name="24" expression="#{CommittenteVigilanzaAction.equal.put('vigilanza',Vigilanza)}"></action>
			<action name="25" expression="#{CommittenteVigilanzaAction.read()}"></action>
			<action name="26" expression="#{CommittenteVigilanzaAction.injectFirst()}"></action>
		</event>
		<transition to="imported pratica without protocollo?"></transition>
	</node>

	<super-state name="super-state1">
		<node name="newEntity">
			<event type="node-enter">
				<action name="1" expression="#{VigilanzaAction.inject(VigilanzaAction.newEntity())}"></action>
				<action name="2" expression="#{VigilanzaAction.create()}"></action>
			</event>
			<transition to="link"></transition>
		</node>
		<node name="link">
			<event type="node-enter">
				<action name="1" expression="#{ProcpraticheAction.link('vigilanza',Vigilanza)}"></action>
				<action name="2" expression="#{ProcpraticheAction.create()}"></action>
			</event>
			<transition to="../end-state1"></transition>
		</node>
	</super-state>

	<node name="inject all without type check, first time tipe is empty">
		<event type="node-enter">
			<action name="1" expression="#{PersonaRuoloAction.injectList(Vigilanza.personaRuolo)}"></action>
			<action name="2" expression="#{CantiereAction.inject(Vigilanza.cantiere)}"></action>
			<action name="3" expression="#{TagCantiereAction.injectList(Cantiere.tagCantiere)}"></action>
			<action name="4" expression="#{OperaioAmiantoAction.injectList(Vigilanza.operaiAmianto,'OperaioAmiantoList')}"></action>
		</event>
		<transition to="injectAll"></transition>
	</node>

	<super-state name="super-state2">
		<node name="checkDitteCantiere">
			<event type="node-enter">
				<action name="1" expression="#{VigilanzaAction.checkDitteCantiere(Cantiere)}"></action>
				<action name="2" expression="#{VigilanzaAction.create()}"></action>
			</event>
			<transition to="../inject all without type check, first time tipe is empty"></transition>
		</node>
	</super-state>

	<decision name="is committente?" expression="#{not empty CommittenteVigilanza}">
		<transition to="fix comm cv" name="true"></transition>
		<transition to="super-state3/new committente" name="false"></transition>
	</decision>

	<super-state name="super-state3">
		<node name="new committente">
			<event type="node-enter">
				<action name="1" expression="#{CommittenteVigilanzaAction.inject(CommittenteVigilanzaAction.newEntity())}"></action>
				<action name="2" expression="#{CommittenteVigilanza.setVigilanza(Vigilanza)}"></action>
				<action name="3" expression="#{CommittenteVigilanzaAction.create()}"></action>
			</event>
			<transition to="../end-state1"></transition>
		</node>
	</super-state>

	<node name="fix comm cv">
		<event type="node-enter">
			<action name="1" expression="#{CommittenteVigilanzaAction.fixCodeValue()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="setta Protocollo.ubicazione fittizia">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.inject(ProtocolloAction.newEntity())}"></action>
			<action name="2" expression="#{not empty Vigilanza.cantiere ? ProtocolloAction.setCodeValue('ubicazione','PHIDIC','TargetSource','Cantiere') : ProtocolloAction.setCodeValue('ubicazione','PHIDIC','TargetSource','Altro')}"></action>
		</event>
		<transition to="is committente?"></transition>
	</node>

	<decision name="imported pratica without protocollo?" expression="#{not empty Procpratiche.createdBy and Procpratiche.createdBy.startsWith('PraticheImporter') and (empty Protocollo or empty Protocollo.ubicazione)}">
		<transition to="setta Protocollo.ubicazione fittizia" name="true"></transition>
		<transition to="is committente?" name="false"></transition>
	</decision>


	<end-state name="end-state1"></end-state>


</process-definition>