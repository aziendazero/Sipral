<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="preMalattie">


	<start-state name="start-state1">
		<transition to="eject Protocollo.malattieProfessionali"></transition>
	</start-state>


	<node name="read MalattiaProfessionale">
		<event type="node-enter">
			<action name="1" expression="#{MalattiaProfessionaleAction.cleanRestrictions()}"></action>
			<action name="2" expression="#{MalattiaProfessionaleAction.equal.put('isActive',true)}"></action>
			<action name="3" expression="#{MalattiaProfessionaleAction.equal.put('procpratiche.internalId', Procpratiche.internalId)}"></action>
			<action name="4" expression="#{MalattiaProfessionaleAction.read()}"></action>
			<action name="5" expression="#{empty MalattiaProfessionale ? MalattiaProfessionaleAction.injectFirst() : ''}"></action>
			<action name="6" expression="#{MalattiaProfessionaleAction.ejectList()}"></action>
			<action name="7" expression="#{MalattiaProfessionaleAction.cleanRestrictions()}"></action>
			<action name="8" expression="#{empty MalattiaProfessionale ? MalattiaProfessionaleAction.inject(MalattiaProfessionaleAction.newEntity()) : ''}"></action>
			<action name="9" expression="#{(MalattiaProfessionale.internalId le 0)? MalattiaProfessionaleAction.copyDataFromProtocol(Protocollo) : ''}"></action>
			<action name="10" expression="#{PersoneGiuridicheAction.inject(MalattiaProfessionale.attualeDitta)}"></action>
			<action name="11" expression="#{SediAction.inject(MalattiaProfessionale.attualeSede)}"></action>
		</event>
		<transition to="read DitteMalattie"></transition>
	</node>

	<node name="read DitteMalattie">
		<event type="node-enter">
			<action name="1" expression="#{DitteMalattieAction.equal.put('isActive',true)}"></action>
			<action name="2" expression="#{DitteMalattieAction.orderBy.put('principale','descending')}"></action>
			<action name="3" expression="#{DitteMalattieAction.orderBy.put('personeGiuridiche.denominazione','ascending')}"></action>
			<action name="4" expression="#{DitteMalattieAction.equal.put('malattiaProfessionale.internalId', MalattiaProfessionale.internalId)}"></action>
			<action name="5" expression="#{DitteMalattieAction.read()}"></action>
		</event>
		<transition to="read FattoriRischio"></transition>
	</node>

	<node name="read FattoriRischio">
		<event type="node-enter">
			<action name="1" expression="#{FattoreRischioAction.equal.put('isActive',true)}"></action>
			<action name="2" expression="#{FattoreRischioAction.orderBy.put('yearStart','descending')}"></action>
			<action name="3" expression="#{FattoreRischioAction.equal.put('malattiaProfessionale.internalId', MalattiaProfessionale.internalId)}"></action>
			<action name="4" expression="#{FattoreRischioAction.read()}"></action>
			<action name="5" expression="#{FattoreRischioAction.manageMalattia(MalattiaProfessionale.diagCode, FattoreRischioList.list, MalattiaProfessionale)}"></action>
		</event>
		<transition to="read VisiteMediche"></transition>
	</node>

	<node name="read VisiteMediche">
		<event type="node-enter">
			<action name="1" expression="#{VisitaMedicaAction.equal.put('isActive',true)}"></action>
			<action name="2" expression="#{VisitaMedicaAction.orderBy.put('data','descending')}"></action>
			<action name="3" expression="#{VisitaMedicaAction.equal.put('malattiaProfessionale.internalId', MalattiaProfessionale.internalId)}"></action>
			<action name="4" expression="#{VisitaMedicaAction.read()}"></action>
		</event>
		<transition to="backup ProcpraticheList"></transition>
	</node>

	<node name="backup ProcpraticheList">
		<event type="node-enter">
			<action name="1" expression="#{org.jboss.seam.core.conversationContext.set('praticheBackup',ProcpraticheList)}"></action>
			<action name="2" expression="#{ProcpraticheAction.backupRestrictions() }"></action>
			<action name="3" expression="#{ProcpraticheAction.ejectList()}"></action>
		</event>
		<transition to="inject InchiestaInfortunio"></transition>
	</node>

	<node name="eject Protocollo.malattieProfessionali">
		<event type="node-enter">
			<action name="1" expression="#{not empty MalattiaProfessionale and not empty MalattiaProfessionale.protocollo and MalattiaProfessionale.protocollo.size() gt 0 ? MalattiaProfessionaleAction.eject() : ''}"></action>
		</event>
		<transition to="read MalattiaProfessionale"></transition>
	</node>

	<node name="inject InchiestaInfortunio">
		<event type="node-enter">
			<action name="1" expression="#{InchiestaInfortunioAction.injectFirst(Procpratiche.inchiestaInfortunio)}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>


	<end-state name="end-state1"></end-state>


</process-definition>