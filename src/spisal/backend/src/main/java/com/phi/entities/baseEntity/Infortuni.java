package com.phi.entities.baseEntity;

/**
 * Infortuni generated by hbm2java
 */

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.naming.NamingException;
import javax.persistence.AssociationOverride;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.ForeignKey;
import org.hibernate.annotations.Index;
import org.hibernate.envers.Audited;

import com.phi.entities.actions.ProcpraticheAction;
import com.phi.entities.dataTypes.AD;
import com.phi.entities.dataTypes.CodeValue;
import com.phi.entities.dataTypes.CodeValueAteco;
import com.phi.entities.dataTypes.CodeValuePhi;
import com.phi.entities.role.Person;

@javax.persistence.Entity
@Table(name = "infortuni")
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
@Audited
public class Infortuni extends BaseEntity {

	private static final long serialVersionUID = 1859752312319607568L;

	/**
	*  javadoc for infortuniExt
	*/
	private InfortuniExt infortuniExt;

	@ManyToOne(fetch=FetchType.LAZY, cascade=CascadeType.PERSIST)
	@JoinColumn(name="infortuni_ext_id")
	@ForeignKey(name="FK_Infortuni_infortuniExt")
	//@Index(name="IX_Infortuni_infortuniExt")
	public InfortuniExt getInfortuniExt(){
		return infortuniExt;
	}

	public void setInfortuniExt(InfortuniExt infortuniExt){
		this.infortuniExt = infortuniExt;
	}

	/**
	*  javadoc for comparto
	*/
	private CodeValueAteco comparto;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="comparto")
	@ForeignKey(name="FK_Infortuni_comparto")
	//@Index(name="IX_Infortuni_comparto")
	public CodeValueAteco getComparto(){
		return comparto;
	}

	public void setComparto(CodeValueAteco comparto){
		this.comparto = comparto;
	}


	/**
	*  javadoc for cantiere
	*/
	private Cantiere cantiere;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="cantiere_id")
	@ForeignKey(name="FK_Infortuni_cantiere")
	//@Index(name="IX_Infortuni_cantiere")
	public Cantiere getCantiere(){
		return cantiere;
	}

	public void setCantiere(Cantiere cantiere){
		this.cantiere = cantiere;
	}


	private CodeValuePhi forma;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="forma")
	@ForeignKey(name="FK_Inf_forma")
	//@Index(name="IX_Inf_forma")
	public CodeValuePhi getForma() {
		return forma;
	}

	public void setForma(CodeValuePhi forma) {
		this.forma = forma;
	}
	
	private CodeValue ruolo;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="ruolo")
	@ForeignKey(name="FK_Inf_ruolo")
	//@Index(name="IX_Inf_ruolo")
	public CodeValue getRuolo() {
		return ruolo;
	}

	public void setRuolo(CodeValue ruolo) {
		this.ruolo = ruolo;
	}
	
	private CodeValuePhi comportamento;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="comportamento")
	@ForeignKey(name="FK_Inf_comp")
	//@Index(name="IX_Inf_comp")
	public CodeValuePhi getComportamento() {
		return comportamento;
	}

	public void setComportamento(CodeValuePhi comportamento) {
		this.comportamento = comportamento;
	}
	
	private CodeValuePhi condizioniDiRischio;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="condizioni_Rischio")
	@ForeignKey(name="FK_Inf_condRischio")
	//@Index(name="IX_Inf_condRischio")
	public CodeValuePhi getCondizioniDiRischio() {
		return condizioniDiRischio;
	}

	public void setCondizioniDiRischio(CodeValuePhi condizioniDiRischio) {
		this.condizioniDiRischio = condizioniDiRischio;
	}
	
	private CodeValuePhi agenteMateriale;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="agente_materiale")
	@ForeignKey(name="FK_Inf_agMater")
	//@Index(name="IX_Inf_agMAter")
	public CodeValuePhi getAgenteMateriale() {
		return agenteMateriale;
	}

	public void setAgenteMateriale(CodeValuePhi agenteMateriale) {
		this.agenteMateriale = agenteMateriale;
	}
	
	private CodeValue agenteParent;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="agente_parent")
	@ForeignKey(name="FK_Inf_agenteParent")
	//@Index(name="IX_Inf_agenteParent")
	public CodeValue getAgenteParent() {
		return agenteParent;
	}

	public void setAgenteParent(CodeValue agenteParent) {
		this.agenteParent = agenteParent;
	}
	
	private CodeValue agenteChildren;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="agente_children")
	@ForeignKey(name="FK_Inf_agenteChildren")
	//@Index(name="IX_Inf_agenteChildren")
	public CodeValue getAgenteChildren() {
		return agenteChildren;
	}

	public void setAgenteChildren(CodeValue agenteChildren) {
		this.agenteChildren = agenteChildren;
	}
	
	/**
	*  javadoc for sedi
	*/
	private Sedi sedi;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="sedi_id")
	@ForeignKey(name="FK_Infortuni_sedi")
	//@Index(name="IX_Infortuni_sedi")
	public Sedi getSedi(){
		return sedi;
	}

	public void setSedi(Sedi sedi){
		this.sedi = sedi;
	}

	/**
	*  javadoc for personeGiuridiche
	*/
	private PersoneGiuridiche personeGiuridiche;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="persone_giuridiche_id")
	@ForeignKey(name="FK_nfrtuni_persneGiuridiche")
	//@Index(name="IX_nfrtuni_persneGiuridiche")
	public PersoneGiuridiche getPersoneGiuridiche(){
		return personeGiuridiche;
	}

	public void setPersoneGiuridiche(PersoneGiuridiche personeGiuridiche){
		this.personeGiuridiche = personeGiuridiche;
	}

	/**
	*  javadoc for personeGiuridiche
	*/
	private PersoneGiuridiche personeGiuridicheExt;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="pg_ext_id")
	@ForeignKey(name="FK_nfrtuni_pgExt")
	//@Index(name="IX_nfrtuni_pgExt")
	public PersoneGiuridiche getPersoneGiuridicheExt(){
		return personeGiuridicheExt;
	}

	public void setPersoneGiuridicheExt(PersoneGiuridiche personeGiuridicheExt){
		this.personeGiuridicheExt = personeGiuridicheExt;
	}

	/**
	*  javadoc for sedi
	*/
	private Sedi sediExt;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="sedi_ext_id")
	@ForeignKey(name="FK_Infortuni_sediExt")
	//@Index(name="IX_Infortuni_sediExt")
	public Sedi getSediExt(){
		return sediExt;
	}

	public void setSediExt(Sedi sediExt){
		this.sediExt = sediExt;
	}
	
	/**
	*  javadoc for date - Data infortunio
	*/
	/**
	 *  Deceased Time
	 */
	private Date deceasedTime;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="deceased_time")
	public Date getDeceasedTime() {
		return deceasedTime;
	}

	public void setDeceasedTime(Date deceasedTime) {
		this.deceasedTime = deceasedTime;
	}
	
	private Date dataAssunzione;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_assunzione")
	public Date getDataAssunzione() {
		return dataAssunzione;
	}

	public void setDataAssunzione(Date dataAssunzione) {
		this.dataAssunzione = dataAssunzione;
	}
	
	private CodeValue deceasedCode;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="deceased_c")
	@ForeignKey(name="FK_Inf_deceased_c")
	//@Index(name="IX_Inf_deceased_c")
	public CodeValue getDeceasedCode() {
		return deceasedCode;
	}

	public void setDeceasedCode(CodeValue deceasedCode) {
		this.deceasedCode = deceasedCode;
	}
	
	private String deceasedNote;
	
	@Column(name = "deceased_note")
	public String getDeceasedNote() {
		return this.deceasedNote;
	}
	
	public void setDeceasedNote(String deceasedNote) {
		this.deceasedNote = deceasedNote;
	}
	
	private String dinamica;
	
	@Column(name = "dinamica", length=4000)
	public String getDinamica() {
		return this.dinamica;
	}
	
	public void setDinamica(String dinamica) {
		this.dinamica = dinamica;
	}
	
	private String pat;
	
	@Column(name = "pat")
	public String getPat() {
		return this.pat;
	}
	
	public void setPat(String pat) {
		this.pat = pat;
	}
	
	private AD deceasedPlace;

	@Embedded
	@AssociationOverride(name="code", joinColumns = @JoinColumn(name="deceasedPlace_code"))
	@AttributeOverrides({
		@AttributeOverride(name="adl", column=@Column(name="deceasedPlace_adl")),
		@AttributeOverride(name="bnr", column=@Column(name="deceasedPlace_bnr")),
		@AttributeOverride(name="cen", column=@Column(name="deceasedPlace_cen")),
		@AttributeOverride(name="cnt", column=@Column(name="deceasedPlace_cnt")),
		@AttributeOverride(name="cpa", column=@Column(name="deceasedPlace_cpa")),
		@AttributeOverride(name="cty", column=@Column(name="deceasedPlace_cty")),
		@AttributeOverride(name="sta", column=@Column(name="deceasedPlace_sta")),
		@AttributeOverride(name="stb", column=@Column(name="deceasedPlace_stb")),
		@AttributeOverride(name="str", column=@Column(name="deceasedPlace_str")),
		@AttributeOverride(name="zip", column=@Column(name="deceasedPlace_zip"))
	})
	public AD getDeceasedPlace() {
		return deceasedPlace;
	}

	public void setDeceasedPlace(AD deceasedPlace) {
		this.deceasedPlace = deceasedPlace;
	}
	
	/**
	*  javadoc for date - Data infortunio
	*/
	private Date data;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data")
	public Date getData(){
		return data;
	}

	public void setData(Date data){
		this.data = data;
	}
	
	/**
	*  javadoc for date - Data infortunio
	*/
	private Date notificationData;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="notification_data")
	public Date getNotificationData(){
		return notificationData;
	}

	public void setNotificationData(Date notificationData){
		this.notificationData = notificationData;
	}
	
	private String ordinalHour;
	
	@Column(name = "ordinal_hour")
	public String getOrdinalHour() {
		return this.ordinalHour;
	}
	
	public void setOrdinalHour(String ordinalHour) {
		this.ordinalHour = ordinalHour;
	}
	

	private String otherDescription;
	
	@Column(name = "other_description")
	public String getOtherDescription() {
		return this.otherDescription;
	}
	
	public void setOtherDescription(String otherDescription) {
		this.otherDescription = otherDescription;
	}

	private CodeValue applicant;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="applicant")
	@ForeignKey(name="FK_Inf_applicant")
	//@Index(name="IX_Inf_applicant")
	public CodeValue getApplicant() {
		return applicant;
	}

	public void setApplicant(CodeValue applicant) {
		this.applicant = applicant;
	}
	
	private CodeValue place;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="place")
	@ForeignKey(name="FK_Inf_place")
	//@Index(name="IX_Inf_place")
	public CodeValue getPlace() {
		return place;
	}

	public void setPlace(CodeValue place) {
		this.place = place;
	}
	
	/**
	*  javadoc for person
	*/
	private Person person;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="person_id")
	@ForeignKey(name="FK_Infortuni_person")
	//@Index(name="IX_Infortuni_person")
	public Person getPerson(){
		return person;
	}

	public void setPerson(Person person){
		this.person = person;
	}

	/**
	*  javadoc for protocollo
	*/
	private Protocollo protocollo;

	@OneToOne(fetch=FetchType.LAZY, mappedBy="infortunio", cascade=CascadeType.PERSIST)
	public Protocollo getProtocollo(){
		return protocollo;
	}

	public void setProtocollo(Protocollo protocollo){
		this.protocollo = protocollo;
	}

	private Procpratiche procpratiche;
	
	@ManyToOne(fetch=FetchType.LAZY/*, cascade=CascadeType.PERSIST*/)
	@JoinColumn(name = "IDPROCPRATICA")
	@ForeignKey(name="FK_Infortuni_procprtiche")
	//@Index(name="IX_Infortuni_procprtiche") 
	public Procpratiche getProcpratiche() {
		return this.procpratiche;
	}

	public void setProcpratiche(Procpratiche procpratiche) {
		this.procpratiche = procpratiche;
	}
	
	@Override
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "Infortuni_sequence")
	@SequenceGenerator(name = "Infortuni_sequence", sequenceName = "Infortuni_sequence")
	@Column(name = "internal_id")
	public long getInternalId() {
		return internalId;
	}
	
	@Override
	public void setInternalId(long internalId) {
		this.internalId = internalId;
	}
	
	private Integer ggPrognosi1;

	@Column(name = "ggprognosi1")
	public Integer getGgPrognosi1() {
		return this.ggPrognosi1;
	}

	public void setGgPrognosi1(Integer ggPrognosi1) {
		this.ggPrognosi1 = ggPrognosi1;
	}
	
	private Integer ggPrognosi2;

	@Column(name = "ggprognosi2")
	public Integer getGgPrognosi2() {
		return this.ggPrognosi2;
	}

	public void setGgPrognosi2(Integer ggPrognosi2) {
		this.ggPrognosi2 = ggPrognosi2;
	}
	
	private Integer ggPrognosi3;

	@Column(name = "ggprognosi3")
	public Integer getGgPrognosi3() {
		return this.ggPrognosi3;
	}

	public void setGgPrognosi3(Integer ggPrognosi3) {
		this.ggPrognosi3 = ggPrognosi3;
	}
	
	private Integer ggPrognosi4;

	@Column(name = "ggprognosi4")
	public Integer getGgPrognosi4() {
		return this.ggPrognosi4;
	}

	public void setGgPrognosi4(Integer ggPrognosi4) {
		this.ggPrognosi4 = ggPrognosi4;
	}
	
	private Integer ggPrognosi5;

	@Column(name = "ggprognosi5")
	public Integer getGgPrognosi5() {
		return this.ggPrognosi5;
	}

	public void setGgPrognosi5(Integer ggPrognosi5) {
		this.ggPrognosi5 = ggPrognosi5;
	}
	
	private Integer ggPrognosiTot;

	@Column(name = "ggprognositot")
	public Integer getGgPrognosiTot() {
		return this.ggPrognosiTot;
	}

	public void setGgPrognosiTot(Integer ggPrognosiTot) {
		this.ggPrognosiTot = ggPrognosiTot;
	}
	
	/**
	*  javadoc for prgr
	*/
	private Boolean prgr;

	@Column(name="PRGR")
	public Boolean getPrgr(){
		return prgr;
	}

	public void setPrgr(Boolean prgr){
		this.prgr = prgr;
	}
	
	/**
	*  javadoc for inchiesta
	*/
	private Boolean inchiesta;

	@Column(name="inchiesta")
	public Boolean getInchiesta(){
		return inchiesta;
	}

	public void setInchiesta(Boolean inchiesta){
		this.inchiesta = inchiesta;
	}
	
	/**
	*  javadoc for hospitalized
	*/
	private Boolean hospitalized;

	@Column(name="hospitalized")
	public Boolean getHospitalized(){
		return hospitalized;
	}

	public void setHospitalized(Boolean hospitalized){
		this.hospitalized = hospitalized;
	}
	
	private String noteprognosi = "Inabilità temporanea assoluta al lavoro";
	
	@Column(name = "noteprognosi", length = 2500)
	public String getNoteprognosi() {
		return this.noteprognosi;
	}

	public void setNoteprognosi(String noteprognosi) {
		this.noteprognosi = noteprognosi;
	}
	

	private String diagnosips;
	
	@Column(name = "diagnosips", length = 2500)
	public String getDiagnosips() {
		return this.diagnosips;
	}

	public void setDiagnosips(String diagnosips) {
		this.diagnosips = diagnosips;
	}

	private CodeValue sedeLesione;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="sede_lesione")
	@ForeignKey(name="FK_Inf_sede")
	//@Index(name="IX_Inf_sede")
	public CodeValue getSedeLesione() {
		return sedeLesione;
	}

	public void setSedeLesione(CodeValue sedeLesione) {
		this.sedeLesione = sedeLesione;
	}
	
	private CodeValue naturaLesione;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="natura_lesione")
	@ForeignKey(name="FK_Inf_natura")
	//@Index(name="IX_Inf_natura")
	public CodeValue getNaturaLesione() {
		return naturaLesione;
	}

	public void setNaturaLesione(CodeValue naturaLesione) {
		this.naturaLesione = naturaLesione;
	}
	
	private CodeValue gravita;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="gravita")
	@ForeignKey(name="FK_Inf_gravita")
	//@Index(name="IX_Inf_gravita")
	public CodeValue getGravita() {
		return gravita;
	}

	public void setGravita(CodeValue gravita) {
		this.gravita = gravita;
	}
	
	private Integer disability;

	@Column(name = "disability")
	public Integer getDisability() {
		return this.disability;
	}

	public void setDisability(Integer disability) {
		this.disability = disability;
	}
	
	private CodeValue tipoContratto;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="tipo_contratto")
	@ForeignKey(name="FK_Inf_tipocon")
	//@Index(name="IX_Inf_tipocon")
	public CodeValue getTipoContratto() {
		return tipoContratto;
	}

	public void setTipoContratto(CodeValue tipoContratto) {
		this.tipoContratto = tipoContratto;
	}
	
	private CodeValue qualifica;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="qualifica")
	@ForeignKey(name="FK_Inf_qualifica")
	//@Index(name="IX_Inf_qualifica")
	public CodeValue getQualifica() {
		return qualifica;
	}

	public void setQualifica(CodeValue qualifica) {
		this.qualifica = qualifica;
	}
	
	private CodeValue mansione;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="mansione")
	@ForeignKey(name="FK_Inf_mansione")
	//@Index(name="IX_Inf_mansione")
	public CodeValue getMansione() {
		return mansione;
	}

	public void setMansione(CodeValue mansione) {
		this.mansione = mansione;
	}
	
	private CodeValue anzianita;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="anzianita")
	@ForeignKey(name="FK_Inf_anzianita")
	//@Index(name="IX_Inf_anzianita")
	public CodeValue getAnzianita() {
		return anzianita;
	}

	public void setAnzianita(CodeValue anzianita) {
		this.anzianita = anzianita;
	}
	
	/**
	*  Specificazioni del comportamento 
	*/
	private List<CodeValuePhi> compSpec;
	
	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
	@JoinTable(name = "comp_spec", joinColumns = { @JoinColumn(name = "infortuni_id") }, inverseJoinColumns = { @JoinColumn(name = "code_value_id") })
	@ForeignKey(name = "FK_InfCompId_CvId", inverseName = "FK_CvId_InfCompId")
	public List<CodeValuePhi> getCompSpec(){
		return compSpec;
	}

	public void setCompSpec(List<CodeValuePhi> compSpec){
		this.compSpec = compSpec;
	}
	
	/**
	*  Evitabilità
	*/
	private List<CodeValuePhi> evitabilita;
	
	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
	@JoinTable(name = "evitabilita", joinColumns = { @JoinColumn(name = "infortuni_id") }, inverseJoinColumns = { @JoinColumn(name = "code_value_id") })
	@ForeignKey(name = "FK_InfEvId_CvId", inverseName = "FK_CvId_InfEvId")
	public List<CodeValuePhi> getEvitabilita(){
		return evitabilita;
	}

	public void setEvitabilita(List<CodeValuePhi> evitabilita){
		this.evitabilita = evitabilita;
	}
	
	private CodeValuePhi azioneIntrapresa;

	@ManyToOne(fetch=FetchType.LAZY, targetEntity=CodeValuePhi.class)
    @JoinColumn(name="azione_intrapresa")
	@ForeignKey(name="FK_Inf_AzInt")
	//@Index(name="IX_Inf_AzInf")
	public CodeValuePhi getAzioneIntrapresa() {
		return azioneIntrapresa;
	}

	public void setAzioneIntrapresa(CodeValuePhi azioneIntrapresa) {
		this.azioneIntrapresa = azioneIntrapresa;
	}
	
	@Transient
	public String getPrognosiDefinitiva() {
		if(this.data != null && this.ggPrognosi2 != null) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(this.data);
			cal.add(Calendar.DATE, this.ggPrognosi2);
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			return sdf.format(cal.getTime());
		}
		return "[data]";
	}
	
	@Transient
	public String getDittaInfortunio(){
		
		String ret = "";
		try{

		if(personeGiuridiche!=null && personeGiuridiche.getDenominazione()!=null){
			ret+=personeGiuridiche.getDenominazione();
			for(Sedi s:personeGiuridiche.getSedi()){
				if(s.getSedePrincipale()){
					ret+= ", " + s.getAddr().toString();
					break;
				}					
			}
			ret+=personeGiuridiche.getPivaOrCf();
			
		}else if(personeGiuridicheExt!=null && personeGiuridicheExt.getDenominazione()!=null){
			ret+=personeGiuridicheExt.getDenominazione();
			for(Sedi s:personeGiuridicheExt.getSedi()){
				if(s.getSedePrincipale()){
					ret+= ", " + s.getAddr().toString();
					break;
				}					
			}
			ret+=personeGiuridicheExt.getPivaOrCf();			
			
		}else if(cantiere!=null){
			ret+= "'"+cantiere.getNaturaOpera()+"', ";
			ret+= "sito in " +cantiere.getAddr();
			
		}
		
			
		}catch(Exception e){}
		return ret;
	}

	@PostPersist
	@PostUpdate
	public void updateAssociations() throws NamingException{

		try {
			Procpratiche p = ProcpraticheAction.instance().getEntity();
			if(p!=null)
				p.updateAssociations();
		}catch(IllegalStateException e) {
			//sto eseguendo l'importer
		}
	}
}
