<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="preViewer">



	<start-state name="start-state1">
		<transition to="refresh"></transition>
	</start-state>


	<decision name="readOnly?" expression="#{(Param['p.home.procpratiche.gestionePraticheAssegnate'].value and (not ProcpraticheAction.isCurrentUserOperatore(Procpratiche))) or (Procpratiche.statusCode.getCode().matches('^.*?(suspended|completed|verified|nullified|held).*$'))}">
		<transition to="setReadOnlyTrue" name="true"></transition>
		<transition to="setReadOnlyFalse" name="false"></transition>
	</decision>

	<node name="setReadOnlyTrue">
		<event type="node-enter">
			<action name="1" expression="#{processManager.setReadOnly(true)}"></action>
		</event>
		<transition to="inject oggetti condivisi"></transition>
	</node>

	<decision name="WorkingLine?" expression="#{Procpratiche.serviceDeliveryLocation.area.code}">
		<transition to="preVigilanza" name="SUPERVISION"></transition>
		<transition to="inject Infortuni" name="WORKACCIDENT"></transition>
		<transition to="pareri tecnici" name="TECHNICALADVICE"></transition>
		<transition to="preMalattie" name="WORKDISEASE"></transition>
		<transition to="benessere" name="COUNSELING"></transition>
		<transition to="stili di vita" name="LIFESTYLE"></transition>
		<transition to="formazione" name="TRAINING"></transition>
		<transition to="informazione" name="INFORMATION"></transition>
		<transition to="end-state1" name="GENERIC"></transition>
		<transition to="pre mdl" name="WORKMEDICINE"></transition>
	</decision>

	<node name="inject oggetti condivisi">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.eject()}"></action>
			<action name="2" expression="#{ProtocolloAction.injectList(Procpratiche.protocollo)}"></action>
			<action name="3" expression="#{OggettoAction.injectList(Procpratiche.oggetti)}"></action>
			<action name="4" expression="#{ProtocolloAction.injectMaster(Procpratiche.protocollo)}"></action>
			<action name="5" expression="#{ProvvedimentiAction.equal.put('procpratiche', Procpratiche)}"></action>
			<action name="6" expression="#{ProvvedimentiAction.equal.put('isActive',true)}"></action>
			<action name="7" expression="#{ProvvedimentiAction.equal.put('attivita.isActive',true)}"></action>
			<action name="8" expression="#{ProvvedimentiAction.orderBy.put('data','descending')}"></action>
			<action name="9" expression="#{ProvvedimentiAction.read()}"></action>
			<action name="10" expression="#{Iter758Action.injectFirst(Provvedimenti.iter758)}"></action>
			<action name="11" expression="#{Iter758Action.ejectList()}"></action>
			<action name="12" expression="#{ProcpraticheEventAction.equal.put('procpratiche', Procpratiche)}"></action>
			<action name="13" expression="#{ProcpraticheEventAction.orderBy.put('creationDate','descending')}"></action>
			<action name="14" expression="#{ProcpraticheEventAction.setReadPageSize(10)}"></action>
			<action name="15" expression="#{ProcpraticheEventAction.read()}"></action>
			<action name="16" expression="#{empty Procpratiche.praticheRiferimenti ? Procpratiche.setPraticheRiferimenti(PraticheRiferimentiAction.newEntity()) : ''}"></action>
			<action name="17" expression="#{PraticheRiferimentiAction.inject(Procpratiche.praticheRiferimenti)}"></action>
			<action name="18" expression="#{PraticheRiferimenti.addProcpratiche(Procpratiche)}"></action>
			<action name="19" expression="#{PraticheRiferimenti.internalId le 0 ? PraticheRiferimentiAction.create() : ''}"></action>
			<action name="20" expression="#{MiglioramentiAction.equal.put('attivita.procpratiche',Procpratiche)}"></action>
			<action name="21" expression="#{MiglioramentiAction.equal.put('attivita.isActive',true)}"></action>
			<action name="22" expression="#{MiglioramentiAction.read()}"></action>
			<action name="23" expression="#{ProtocolloMultiAction.injectList(Procpratiche.protocolloMulti)}"></action>
			<action name="24" expression="#{ProcpraticheAction.injectBuonePratiche(Procpratiche)}"></action>
			<action name="25" expression="#{AttoAction.equal.put('procpratiche', Procpratiche)}"></action>
			<action name="26" expression="#{AttoAction.orderBy.put('creationDate','descending')}"></action>
			<action name="27" expression="#{AttoAction.setReadPageSize(10)}"></action>
			<action name="28" expression="#{AttoAction.read()}"></action>
		</event>
		<transition to="read attivita x tab"></transition>
	</node>

	<node name="inject Infortuni">
		<event type="node-enter">
			<action name="1" expression="#{InfortuniAction.injectList(InfortuniAction.filterOnlyMortali(Procpratiche.infortuni))}"></action>
			<action name="2" expression="#{InfortuniAction.injectFirst(InfortuniList)}"></action>
			<action name="3" expression="#{InfortuniExtAction.inject(Infortuni.infortuniExt)}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="refresh">
		<event type="node-enter">
			<action name="1" expression="#{ProcpraticheAction.refresh()}"></action>
			<action name="2" expression="#{ProtocolloAction.temporary.remove('linkProtocollo')}"></action>
		</event>
		<transition to="readOnly?"></transition>
	</node>

	<node name="pareri tecnici">
		<event type="node-enter">
			<action name="1" expression="#{ParereTecnicoAction.cleanRestrictions()}"></action>
			<action name="2" expression="#{ParereTecnicoAction.equal.put('isActive',true)}"></action>
			<action name="3" expression="#{ParereTecnicoAction.equal.put('procpratiche.internalId', Procpratiche.internalId)}"></action>
			<action name="4" expression="#{ParereTecnicoAction.select.add('isActive')}"></action>
			<action name="5" expression="#{ParereTecnicoAction.read()}"></action>
			<action name="6" expression="#{ParereTecnicoAction.checkAndInject(ParereTecnico,Procpratiche,ParereTecnicoList.isEmpty())}"></action>
			<action name="7" expression="#{ParereTecnicoAction.ejectList()}"></action>
			<action name="8" expression="#{ParereTecnicoAction.cleanRestrictions()}"></action>
			<action name="9" expression="#{empty ParereTecnico ? ParereTecnicoAction.inject(ParereTecnicoAction.newEntity()) : ''}"></action>
			<action name="10" expression="#{ParereTecnicoAction.manageTermini(Procpratiche.protocollo)}"></action>
			<action name="11" expression="#{ProcpraticheAction.temporary.put('showRiferimenti',true)}"></action>
			<action name="12" expression="#{PersonaGiuridicaSedeAction.cleanRestrictions()}"></action>
			<action name="13" expression="#{PersonaGiuridicaSedeAction.equal.put('isActive',true)}"></action>
			<action name="14" expression="#{PersonaGiuridicaSedeAction.equal.put('parereTecnico.internalId', ParereTecnico.internalId)}"></action>
			<action name="15" expression="#{PersonaGiuridicaSedeAction.read()}"></action>
			<action name="16" expression="#{PatentiniAction.injectEmptyList()}"></action>
			<action name="17" expression="#{not empty ParereTecnico.patentini ? PatentiniList.list.addAll(ParereTecnico.patentini) : ''}"></action>
			<action name="18" expression="#{PatentiniAction.injectFirst()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<process-state name="preVigilanza">
		<sub-process name="MOD_home/CORE/PROCESSES/Utility/Pratiche/preVigilanza" binding="late"></sub-process>
		<transition to="end-state1"></transition>
	</process-state>

	<process-state name="preMalattie">
		<sub-process name="MOD_home/CORE/PROCESSES/Utility/Pratiche/preMalattie" binding="late"></sub-process>
		<transition to="end-state1"></transition>
	</process-state>
	
	
		<node name="benessere">
		<event type="node-enter">
			<action name="1" expression="#{BenessereOrgAction.cleanRestrictions()}"></action>
			<action name="2" expression="#{BenessereOrgAction.equal.put('isActive',true)}"></action>
			<action name="3" expression="#{BenessereOrgAction.equal.put('procpratiche.internalId', Procpratiche.internalId)}"></action>
			<action name="4" expression="#{BenessereOrgAction.read()}"></action>
			<action name="5" expression="#{empty BenessereOrg ? BenessereOrgAction.injectFirst() : ''}"></action>
			<action name="6" expression="#{BenessereOrgAction.ejectList()}"></action>
			<action name="7" expression="#{BenessereOrgAction.cleanRestrictions()}"></action>
			<action name="8" expression="#{empty BenessereOrg ? BenessereOrgAction.inject(BenessereOrgAction.newEntity()) : ''}"></action>
			<action name="9" expression="#{TipoProdFinitoAction.injectList(BenessereOrg.tipoProdFinito)}"></action>
			<action name="10" expression="#{BenessereOrgAction.temporary.put('tipoPratica',BenessereOrg.tipoPratica)}"></action>
			<action name="11" expression="#{TipoProdFinitoAction.temporary.put('parentEntity','COUNSELING')}"></action>
			<action name="12" expression="#{BenessereOrgAction.injectArgomentiLegge81()}"></action>
			<action name="13" expression="#{ProcpraticheAction.temporary.put('showRiferimenti',true)}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>
	
	
	<node name="stili di vita">
		<event type="node-enter">
			<action name="1" expression="#{TipoProdFinitoAction.temporary.put('parentEntity','LIFESTYLE')}"></action>
			<action name="2" expression="#{LifestyleAction.cleanRestrictions()}"></action>
			<action name="3" expression="#{LifestyleAction.equal.put('isActive',true)}"></action>
			<action name="4" expression="#{LifestyleAction.equal.put('procpratiche.internalId', Procpratiche.internalId)}"></action>
			<action name="5" expression="#{LifestyleAction.read()}"></action>
			<action name="6" expression="#{LifestyleAction.injectFirst()}"></action>
			<action name="7" expression="#{LifestyleAction.ejectList()}"></action>
			<action name="8" expression="#{LifestyleAction.cleanRestrictions()}"></action>
			<action name="9" expression="#{empty Lifestyle ? LifestyleAction.inject(LifestyleAction.newEntity()) : ''}"></action>
			<action name="10" expression="#{TipoProdFinitoAction.injectList(Lifestyle.tipoProdFinito)}"></action>
			<action name="11" expression="#{SoggettoAction.injectList(Lifestyle.soggetto)}"></action>
			<action name="12" expression="#{LifestyleAction.injectArgomentiLegge81()}"></action>
			<action name="13" expression="#{ProcpraticheAction.temporary.put('showRiferimenti',true)}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="formazione">
		<event type="node-enter">
			<action name="1" expression="#{TipoProdFinitoAction.temporary.put('parentEntity','TRAINING')}"></action>
			<action name="2" expression="#{FormazioneAction.cleanRestrictions()}"></action>
			<action name="3" expression="#{FormazioneAction.equal.put('isActive',true)}"></action>
			<action name="4" expression="#{FormazioneAction.equal.put('procpratiche.internalId', Procpratiche.internalId)}"></action>
			<action name="5" expression="#{FormazioneAction.read()}"></action>
			<action name="6" expression="#{FormazioneAction.injectFirst()}"></action>
			<action name="7" expression="#{FormazioneAction.ejectList()}"></action>
			<action name="8" expression="#{FormazioneAction.cleanRestrictions()}"></action>
			<action name="9" expression="#{empty Formazione ? FormazioneAction.inject(FormazioneAction.newEntity()) : ''}"></action>
			<action name="10" expression="#{TipoProdFinitoAction.injectList(Formazione.tipoProdFinito)}"></action>
			<action name="11" expression="#{FormazioneAction.injectArgomentiLegge81()}"></action>
			<action name="12" expression="#{ProcpraticheAction.temporary.put('showRiferimenti',true)}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="informazione">
		<event type="node-enter">
			<action name="1" expression="#{TipoProdFinitoAction.temporary.put('parentEntity','INFORMATION')}"></action>
			<action name="2" expression="#{InformazioneAction.cleanRestrictions()}"></action>
			<action name="3" expression="#{InformazioneAction.equal.put('isActive',true)}"></action>
			<action name="4" expression="#{InformazioneAction.equal.put('procpratiche.internalId', Procpratiche.internalId)}"></action>
			<action name="5" expression="#{InformazioneAction.read()}"></action>
			<action name="6" expression="#{InformazioneAction.injectFirst()}"></action>
			<action name="7" expression="#{InformazioneAction.ejectList()}"></action>
			<action name="8" expression="#{InformazioneAction.cleanRestrictions()}"></action>
			<action name="9" expression="#{empty Informazione ? InformazioneAction.inject(InformazioneAction.newEntity()) : ''}"></action>
			<action name="10" expression="#{TipoProdFinitoAction.injectList(Informazione.tipoProdFinito)}"></action>
			<action name="11" expression="#{InformazioneAction.injectArgomentiLegge81()}"></action>
			<action name="12" expression="#{ProcpraticheAction.temporary.put('showRiferimenti',true)}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<decision name="WorkingLineNull?" expression="#{Procpratiche.serviceDeliveryLocation.area.code==null}">
		<transition to="WorkingLine?" name="false"></transition>
		<transition to="end-state1" name="true"></transition>
	</decision>

	<node name="read attivita x tab">
		<event type="node-enter">
			<action name="1" expression="#{AttivitaAction.equal.put('procpratiche',Procpratiche)}"></action>
			<action name="2" expression="#{AttivitaAction.orderBy.put('dataInizio','descending')}"></action>
			<action name="3" expression="#{AttivitaAction.equal.put('isActive',true)}"></action>
			<action name="4" expression="#{AttivitaAction.setReadPageSize(10)}"></action>
			<action name="5" expression="#{AttivitaAction.read()}"></action>
		</event>
		<transition to="WorkingLineNull?"></transition>
	</node>

	<node name="setReadOnlyFalse">
		<event type="node-enter">
			<action name="1" expression="#{processManager.setReadOnly(false)}"></action>
		</event>
		<transition to="inject oggetti condivisi"></transition>
	</node>

	<decision name="isValutazioneConclusivaMdl?" expression="#{Procpratiche.conclusioniMdl eq null}">
		<transition to="injectDiag" name="false"></transition>
		<transition to="injectNew" name="true"></transition>
	</decision>

	<node name="injectNew">
		<event type="node-enter">
			<action name="1" expression="#{ValutazioneConclusivaMdlAction.initOperatore(ValutazioneConclusivaMdl)}"></action>
			<action name="2" expression="#{ProcpraticheAction.link('conclusioniMdl',ValutazioneConclusivaMdl)}"></action>
			<action name="3" expression="#{ProcpraticheAction.create()}"></action>
		</event>
		<transition to="readOnly 2?"></transition>
	</node>

	<node name="injectDiag">
		<event type="node-enter">
			<action name="1" expression="#{DiagMdlAction.injectList(ValutazioneConclusivaMdl.diagMdl)}"></action>
			<action name="2" expression="#{ValutazioneConclusivaMdl.operatore eq null?ValutazioneConclusivaMdlAction.initOperatore(ValutazioneConclusivaMdl):''}"></action>
		</event>
		<transition to="readOnly 2?"></transition>
	</node>

	<process-state name="pre mdl">
		<sub-process name="MOD_home/CORE/PROCESSES/Utility/Pratiche/preMdl" binding="late"></sub-process>
		<transition to="isValutazioneConclusivaMdl?"></transition>
	</process-state>

	<decision name="readOnly 2?" expression="#{(Param['p.home.procpratiche.gestionePraticheAssegnate'].value and (not ProcpraticheAction.isCurrentUserOperatore(Procpratiche))) or (Procpratiche.statusCode.getCode().matches('^.*?(suspended|completed|verified|nullified|held).*$'))}">
		<transition to="data parere today" name="false"></transition>
		<transition to="end-state1" name="true"></transition>
	</decision>

	<node name="data parere today">
		<event type="node-enter">
			<action name="1" expression="#{ValutazioneConclusivaMdl.data eq null or ValutazioneConclusivaMdl.data eq '' ? ValutazioneConclusivaMdl.setData(function.currentDateTime()) : ''}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>
	
	<end-state name="end-state1"></end-state>





</process-definition>