<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="getInail">


	<start-state name="start-state1">
		<transition to="inject cs"></transition>
	</start-state>


	<node name="inject cs">
		<event type="node-enter">
			<action name="1" expression="#{CodeSystemAction.injectCs(CodeSystemAction.getCodeSystem('PHIDIC').id)}"></action>
			<action name="2" expression="#{ProtocolloAction.setAllowedWorkingLines()}"></action>
		</event>
		<transition to="tipo popup"></transition>
	</node>

	<task-node name="tipo popup">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_home/CORE/FORMS/popup/select_tipo_segnalazione')}"></action>
		</event>
		<transition to="eject cs"></transition>
	</task-node>

	<node name="eject cs">
		<event type="node-enter">
			<action name="1" expression="#{CodeSystemAction.eject()}"></action>
			<action name="2" expression="#{CodeValueAction.temporary.remove('allowedCodes')}"></action>
			<action name="3" expression="#{CodeValueAction.temporary.remove('allowedDomains')}"></action>
		</event>
		<transition to="operation?"></transition>
	</node>

	<decision name="operation?" expression="#{button.mnemonic}">
		<transition to="tipo popup" name="BtnTipoCancel"></transition>
		<transition to="inject working line" name="BtnSave"></transition>
		<transition to="eject" name="BtnBack"></transition>
	</decision>

	<node name="eject">
		<event type="node-enter">
			<action name="1" expression="#{CodeValuePhiAction.eject()}"></action>
			<action name="2" expression="#{ProtocolloAction.setDataScadenza()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<super-state name="super-state1">
		<node name="add cv">
			<event type="node-enter">
				<action name="1" expression="#{Protocollo.setCode(CodeValuePhi)}"></action>
				<action name="2" expression="#{ProtocolloAction.create()}"></action>
				<action name="3" expression="#{Protocollo.setUos(UOS)}"></action>
				<action name="4" expression="#{ProtocolloAction.cleanWorkingLine()}"></action>
			</event>
			<transition to="code=5 or 13.4 or 7?"></transition>
		</node>
		<decision name="code=5 or 13.4 or 7?" expression="#{function.hasCodeIn(Protocollo.code.code,'5','7.1','7.2','7.3','7.4','7.5','7.6','7.7','7.8','7.9','8.1','8.2','8.3','13.3','13.4','14.9')}">
			<transition to="init dettagli" name="true"></transition>
			<transition to="../set Scadenza" name="false"></transition>
		</decision>
		<node name="init dettagli">
			<event type="node-enter">
				<action name="1" expression="#{DettagliBonificheAction.inject(DettagliModificheAction.newEntity())}"></action>
				<action name="2" expression="#{DettagliBonificheAction.link('protocollo',Protocollo)}"></action>
				<action name="3" expression="#{DettagliBonificheAction.create()}"></action>
			</event>
			<transition to="../set Scadenza"></transition>
		</node>
	</super-state>

	<task-node name="alert popup">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_home/CORE/FORMS/popup/UOS_alert')}"></action>
		</event>
		<transition to="Button?"></transition>
	</task-node>

	<decision name="Button?" expression="#{(button.getMnemonic())}">
		<transition to="inject cs" name="BtnCancel"></transition>
		<transition to="super-state1/add cv" name="BtnSave"></transition>
	</decision>

	<node name="inject working line">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.injectWorkingLine(Protocollo, CodeValuePhi)}"></action>
		</event>
		<transition to="first time?"></transition>
	</node>

	<decision name="first time?" expression="#{empty Protocollo.uos}">
		<transition to="alert popup" name="false"></transition>
		<transition to="super-state1/add cv" name="true"></transition>
	</decision>

	<node name="set Scadenza">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.setDataScadenza()}"></action>
		</event>
		<transition to="eject"></transition>
	</node>


	<end-state name="end-state1"></end-state>


</process-definition>