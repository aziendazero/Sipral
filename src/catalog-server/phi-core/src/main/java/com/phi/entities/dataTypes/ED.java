package com.phi.entities.dataTypes;

import java.io.Serializable;
import java.util.Arrays;

import javax.persistence.Embeddable;

import org.hibernate.envers.Audited;

@Embeddable
@Audited
public class ED implements Serializable {

	private static final long serialVersionUID = -1803584085968580853L;

//	protected CodeValue mediaType;
	protected byte[] bytes;
	protected String string;

	public ED() {
	}

	//FIXME: to reenable mediaType: db autogeneration fails: if @ForeignKey(name="FK_mt") repeated fk name... 
	// if fk autogenerated: too long
	
//	@ManyToOne(fetch=FetchType.LAZY)
//    @JoinColumn(name="mediaType")
//	@ForeignKey(name="FK_mt") //FIXME: if defined repeated fk name...
//	public CodeValue getMediaType() {
//		return this.mediaType;
//	}
//
//	public void setMediaType(CodeValue mediaType) {
//		this.mediaType = mediaType;
//	}

	public byte[] getBytes() {
		return this.bytes;
	}

	public void setBytes(byte[] bytes) {
		this.bytes = bytes;
	}

	public String getString() {
		return this.string;
	}

	public void setString(String string) {
		this.string = string;
	}

	@Override
	public String toString() {
		if (bytes != null) {
			return new String(bytes);
		} else {
			return string;
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(bytes);
//		result = prime * result
//				+ ((mediaType == null) ? 0 : mediaType.hashCode());
		result = prime * result + ((string == null) ? 0 : string.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ED other = (ED) obj;
		if (!Arrays.equals(bytes, other.bytes))
			return false;
//		if (mediaType == null) {
//			if (other.mediaType != null)
//				return false;
//		} else if (!mediaType.equals(other.mediaType))
//			return false;
		if (string == null) {
			if (other.string != null)
				return false;
		} else if (!string.equals(other.string))
			return false;
		return true;
	}
}