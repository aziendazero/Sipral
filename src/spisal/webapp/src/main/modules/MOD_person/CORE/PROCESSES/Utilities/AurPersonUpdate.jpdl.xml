<?xml version="1.0" encoding="UTF-8"?>
<process-definition  xmlns=""  name="AurPersonSearch">


	<start-state name="start-state1">
		<transition to="BackUp Person"></transition>
	</start-state>


	<task-node name="aur search UI">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_person/CORE/FORMS/aur_search_person')}"></action>
		</event>
		<transition to="button 1?"></transition>
	</task-node> 

	<decision name="button 1?" expression="#{(button.getMnemonic())}">
		<transition to="validate" name="Search"></transition>
		<transition to="eject list" name="BtnBack"></transition>
		<transition to="super-state1/import from aur to local db" name="BtnSave"></transition>
		<transition to="checkAnagrafica" name="rowSelected"></transition>
		<transition to="clean form" name="cleanForm"></transition>
	</decision>

	<node name="search in aur">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.temporary.remove('duplicateFound')}"></action>
			<action name="2" expression="#{PersonAction.temporary.remove('exception')}"></action>
			<action name="3" expression="#{PersonAction.injectList(PersonAction.aurSearch(PersonAction.temporary['nameFam'],PersonAction.temporary['nameGiv'],PersonAction.temporary['fiscalCode'],PersonAction.temporary['mpi'],PersonAction.temporary['cs'],PersonAction.temporary['stp'],PersonAction.temporary['eni'],PersonAction.temporary['team'],PersonAction.temporary['dob'],PersonAction.temporary['birthCityName']))}"></action>
		</event>
		<transition to="aur search UI"></transition>
	</node>



	<node name="eject list">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.temporary.remove('giaInAnagrafica')}"></action>
			<action name="2" expression="#{PersonAction.temporary.put('ricercaEffettuata', false)}"></action>
			<action name="3" expression="#{PersonAction.ejectList()}"></action>
			<action name="4" expression="#{PersonAction.eject()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="pre actions">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.temporary.put('fiscalCode',PersonAction.like['fiscalCode'])}"></action>
			<action name="2" expression="#{PersonAction.temporary.put('nameFam',PersonAction.like['name.fam'])}"></action>
			<action name="3" expression="#{PersonAction.temporary.put('nameGiv',PersonAction.like['name.giv'])}"></action>
			<action name="4" expression="#{PersonAction.ejectList()}"></action>
			<action name="5" expression="#{PersonAction.eject()}"></action>
			<action name="6" expression="#{PersonAction.temporary.put('giaInAnagrafica',false)}"></action>
		</event>
		<transition to="aur search UI"></transition>
	</node>

	<super-state name="super-state1">
		<node name="import from aur to local db">
			<event type="node-enter">
				<action name="1" expression="#{PersonAction.temporary.put('ricercaEffettuata', false)}"></action>
				<action name="2" expression="#{PersonAction.aurImport(Person)}"></action>
			</event>
			<transition to="../no errors?"></transition>
		</node>
	</super-state>

	<node name="checkAnagrafica">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.checkAnagraficaLocale(Person)}"></action>
		</event>
		<transition to="aur search UI"></transition>
	</node>

	<decision name="validate" expression="#{(!(PersonAction.temporary['nameFam'] == null or PersonAction.temporary['nameFam'].isEmpty()) and (PersonAction.temporary['nameGiv'].length() lt 2 or PersonAction.temporary['nameGiv'] == null)) or (!(PersonAction.temporary['nameGiv'] == null or PersonAction.temporary['nameGiv'].isEmpty()) and (PersonAction.temporary['nameFam'].length() lt 2 or PersonAction.temporary['nameFam'] == null))}">
		<transition to="aur search UI" name="true"></transition>
		<transition to="search in aur" name="false"></transition>
	</decision>

	<node name="clean form">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.eject()}"></action>
			<action name="2" expression="#{PersonAction.temporary.remove('nameFam')}"></action>
			<action name="3" expression="#{PersonAction.temporary.remove('nameGiv')}"></action>
			<action name="4" expression="#{PersonAction.temporary.remove('dob')}"></action>
			<action name="5" expression="#{PersonAction.temporary.remove('fiscalCode')}"></action>
			<action name="6" expression="#{PersonAction.temporary.remove('team')}"></action>
			<action name="7" expression="#{PersonAction.temporary.remove('mpi')}"></action>
			<action name="8" expression="#{PersonAction.temporary.remove('cs')}"></action>
			<action name="9" expression="#{PersonAction.temporary.remove('stp')}"></action>
			<action name="10" expression="#{PersonAction.temporary.remove('eni')}"></action>
			<action name="11" expression="#{PersonAction.like.remove('name.fam')}"></action>
			<action name="12" expression="#{PersonAction.like.remove('name.giv')}"></action>
			<action name="13" expression="#{PersonAction.like.remove('fiscalCode')}"></action>
		</event>
		<transition to="pre actions"></transition>
	</node>

	<decision name="no errors?" expression="#{PersonAction.temporary['exception']==null or PersonAction.temporary['exception'].isEmpty()}">
		<transition to="end-state1" name="true"></transition>
		<transition to="aur search UI" name="false"></transition>
	</decision>

	<decision name="decision1" expression="#{Person.name.fam ne null and Person.name.fam ne '' and Person.name.giv ne null and Person.name.giv ne '' and Person.genderCode ne null and Person.genderCode ne '' and Person.birthTime ne null and Person.birthTime ne '' and Person.fiscalCode ne null and Person.fiscalCode ne ''}">
		<transition to="Error PopUp 1" name="false"></transition>
		<transition to="TryToUpdate" name="true"></transition>
	</decision>

	<task-node name="Error PopUp 1">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_person/CORE/FORMS/popup/AURPopUpError1')}"></action>
		</event>
		<transition to="Remove BackUp"></transition>
	</task-node>

	<decision name="TryToUpdate" expression="#{PersonAction.aurUpdate(Person)}">
		<description>
			false
		</description>
		<transition to="Error PopUp 2" name="false"></transition>
		<transition to="Ok PopUp" name="true"></transition>
	</decision>

	<task-node name="Error PopUp 2">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_person/CORE/FORMS/popup/AURPopUpError2')}"></action>
		</event>
		<transition to="Remove BackUp"></transition>
	</task-node>

	<node name="BackUp Person">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.temporary.put('backUp', Person) }"></action>
		</event>
		<transition to="decision1"></transition>
	</node>

	<node name="Remove BackUp">
		<event type="node-enter">
			<action name="1" expression="#{PersonAction.temporary.remove('backUp')}"></action>
		</event>
		<transition to="end-state3"></transition>
	</node>

	<task-node name="Ok PopUp">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_person/CORE/FORMS/popup/AURPopUpOk')}"></action>
		</event>
		<transition to="Remove BackUp"></transition>
	</task-node>


	<end-state name="end-state1"></end-state>

	<end-state name="end-state3"></end-state>


</process-definition>