<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="mediciEdit">


	<start-state name="start-state1">
		<transition to="coming from?"></transition>
	</start-state>


	<decision name="coming from?" expression="#{(button.getMnemonic())}">
		<transition to="super-state1/medico delete" name="medDel"></transition>
		<transition to="inject new" name="medNew"></transition>
		<transition to="medico edit" name="medEdit"></transition>
		<transition to="medico edit" name="operation"></transition>
	</decision>

	<super-state name="super-state1">
		<node name="medico delete">
			<event type="node-enter">
				<action name="1" expression="#{Physician.setPerson(null)}"></action>
				<action name="2" expression="#{Physician.setOrganization(null)}"></action>
				<action name="3" expression="#{PhysicianAction.delete()}"></action>
			</event>
			<transition to="../eject"></transition>
		</node>
	</super-state>

	<node name="eject">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.eject()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="inject new">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.inject(PhysicianAction.newEntity())}"></action>
			<action name="2" expression="#{PhysicianAction.setCodeValue('code','PHIDIC','PhysicianRoles','oth')}"></action>
		</event>
		<transition to="medico edit"></transition>
	</node>

	<task-node name="medico edit">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_Anagrafiche/CORE/FORMS/mediciEdit')}"></action>
		</event>
		<transition to="next from new?"></transition>
	</task-node>

	<decision name="next from new?" expression="#{(button.getMnemonic())}">
		<transition to="new?" name="BtnBack"></transition>
		<transition to="org present?" name="BtnSave"></transition>
		<transition to="Search ASL" name="ASL"></transition>
	</decision>

	<node name="eject and evict">
		<event type="node-enter">
			<action name="1" expression="#{Physician.setPerson(null)}"></action>
			<action name="2" expression="#{Physician.setOrganization(null)}"></action>
			<action name="3" expression="#{PhysicianAction.ejectAndEvict()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<super-state name="super-state2">
		<node name="create">
			<event type="node-enter">
				<action name="1" expression="#{PhysicianAction.create()}"></action>
			</event>
			<transition to="../medico edit"></transition>
		</node>
	</super-state>

	<process-state name="Search ASL">
		<sub-process name="MOD_HBS/CORE/PROCESSES/Search Asl" binding="late"></sub-process>
		<transition to="set Organization"></transition>
	</process-state>

	<node name="set Organization">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.link('organization',Organization)}"></action>
		</event>
		<transition to="medico edit"></transition>
	</node>

	<decision name="new?" expression="#{Physician.internalId le 0}">
		<transition to="eject and evict" name="true"></transition>
		<transition to="refresh" name="false"></transition>
	</decision>

	<node name="refresh">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.refresh()}"></action>
		</event>
		<transition to="eject"></transition>
	</node>

	<node name="filter own ULSSs">
		<event type="node-enter">
			<action name="1" expression="#{PhysicianAction.filterOwnOrgs(PhysicianAction.temporary['orgList'])}"></action>
		</event>
		<transition to="Search ASL"></transition>
	</node>

	<decision name="org present?" expression="#{not empty Physician.organization}">
		<transition to="medico edit" name="false"></transition>
		<transition to="duplicate name?" name="true"></transition>
	</decision>

	<decision name="duplicate name?" expression="#{PhysicianAction.checkDuplicateName(Physician)}">
		<transition to="duplicate code?" name="false"></transition>
		<transition to="duplicate warning" name="true"></transition>
	</decision>

	<task-node name="duplicate warning">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_Anagrafiche/CORE/FORMS/Physician_already_present')}"></action>
		</event>
		<transition to="dup warning btn?"></transition>
	</task-node>

	<decision name="dup warning btn?" expression="#{(button.getMnemonic())}">
		<transition to="duplicate code?" name="OK"></transition>
		<transition to="medico edit" name="BACK"></transition>
	</decision>

	<decision name="duplicate code?" expression="#{PhysicianAction.checkDuplicateRegionalCode(Physician)}">
		<transition to="super-state2/create" name="false"></transition>
		<transition to="duplicate error" name="true"></transition>
	</decision>

	<task-node name="duplicate error">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_Anagrafiche/CORE/FORMS/Physician_duplicate_error')}"></action>
		</event>
		<transition to="medico edit"></transition>
	</task-node>

	<super-state name="super-state3">
		<node name="Create">
			<event type="node-enter">
				<action name="1" expression="#{PhysicianAction.create()}"></action>
			</event>
			<transition to="../Search ASL"></transition>
		</node>
	</super-state>

	<end-state name="end-state1"></end-state>


</process-definition>