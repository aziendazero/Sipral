FORMS AND CUSTOM CODE TO OBTAIN THE SIGNATURE PROCESS:

==============================================================================================================================================
[1] add a button in a form to have the process go to a signature section
==============================================================================================================================================
example:

[...]
<a4j:commandButton action="#{processManager.manageTask('Button_1360681994727;SIGN')}" id="Button_1360681994727" alt="${messages.alt_Button_1360681994727}" style="height: 40px;width: 40px;position: absolute;left: 0px;top: 0px;" reRender="phiDesktop" limitToList="true" />
[...]




==============================================================================================================================================
[2] edit the process accordingly by adding the transition to the signature UI .. etc.
==============================================================================================================================================
example:

[...]
    <transition to="super-state2/DeleteNote" name="canc"></transition>
		<transition to="sign pdf UI" name="SIGN"></transition>
    </decision>
[...]
	<task-node name="sign pdf UI">
		<task>
			<assignment actor-id="#{actor.id}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{processManager.managePagination('/MOD_Medical_Diary/CORE/FORMS/signature')}"></action>
			<action name="end-previous-task-node" expression="#{processManager.endTaskInstance()}"></action>
		</event>
		<transition to="Read Notes"></transition>
	</task-node>
[...]


==============================================================================================================================================
[3] create a SPECIFIC FORM FOR THAT SPECIFIC PROCESS to sign what you want. 
==============================================================================================================================================
You cannot create a unique signing form for all the solution
because in this form you have to tell the name of the report that you're going to sign, and the report is usually specific for the process, as 
other processes may need to sign different reports.
example:

<div xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:s="http://jboss.com/products/seam/taglib" xmlns:rich="http://richfaces.org/rich" xmlns:a4j="http://richfaces.org/a4j" xmlns:jstl="http://java.sun.com/jstl/core" style="height:100%;width:100%;">
		<a4j:form ajaxSubmit="true" id="f_sign_pdf" prependId="false" style="height:100%;">
			<a4j:commandButton action="#{processManager.manageTask('Button_1279112083246')}" id="Button_1279112083246" alt="BUTTON" style="height: 73px;width: 73px;position: absolute;left: 12px;top: 12px;" reRender="phiDesktop" limitToList="true" image="images/phi_frame_OK.png" />


			#{itextUtils.updateTimeStamp()}


<div style="position: absolute;top:100px;left:10px;">

		
<applet classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93" width="800" height="600" align="baseline"
				standby="PkNet Java applet Loading ..."
				codebase="http://java.sun.com/products/plugin/autodl/jinstall-1_4_1-windowsi586.cab#Version=1,2,2,0">
				<PARAM NAME = "code" VALUE="com.intesi.pknet.applet.PkNetApplet.class" />
				<PARAM NAME = "ARCHIVE" VALUE = "pknetjappl.jar, pknetj.jar, itext-1.4.jar" />
				<PARAM NAME = "codebase" VALUE="./common/signature/" />
				<PARAM NAME = "type" VALUE="application/x-java-applet;version=1.2.2" />
				<PARAM NAME = "Action" VALUE = "PDFADDSIGN"/>
				<PARAM NAME = "ImageFile" VALUE = "pknet-gold-Italtbs.gif.p7m" />
				<PARAM NAME = "PostURL" VALUE = "#{request.getScheme()}://#{request.getServerName()}:#{request.getServerPort()}/phikNet/SignedFileSaver?fileName=#{request.getScheme()}://#{request.getServerName()}:#{request.getServerPort()}/PHI_DIARIO/MOD_Medical_Diary/CORE/FORMS/r_ClinicalDiary_#{itextUtils.getTimeStamp()}_signed.tmp&amp;cid=#{param.get('cid')}&amp;savePath=X:/PHI/RE/EnterprisePlatform-4.3.0.GA_CP07/jboss-as/server/production/deploy-apps/CATALOG_SERVER.ear#{request.getContextPath()}.war/pdf/&amp;solutionName=PHI_DIARIO" />
				<PARAM NAME = "DocumentURL" VALUE = "#{request.getScheme()}://#{request.getServerName()}:#{request.getServerPort()}#{request.getContextPath()}/pdf/r_ClinicalDiary_#{mockPDFFileSaver.savePDF('X:\\PHI\\RE\\EnterprisePlatform-4.3.0.GA_CP07\\jboss-as\\server\\production\\deploy-apps\\CATALOG_SERVER.ear\\PHI_DIARIO.war\\pdf\\r_ClinicalDiary.tmp','/MOD_Medical_Diary/CORE/FORMS/r_ClinicalDiary.xhtml',conversation.id,itextUtils.getTimeStamp())}.tmp" />
				<PARAM NAME = "scriptable" VALUE = "true" />
				<PARAM NAME = "progressbar" VALUE = "true" />
				<PARAM NAME = "boxmessage" VALUE = "PkNet Java applet Loading ..." />
				<PARAM NAME = "HashAlgorithm" VALUE = "sha256" />
		</applet>
		
		
</div>

		</a4j:form>
</div>

 
NOTES: #{itextUtils.updateTimeStamp()} is mandatory, somewhere in the form: this updates an session-level variable so that every step of the
signature process can retrieve the same value, hence work with the same file.

values to pass:
ImageFile   = the intesi image file, which is encoded and its validity represents the validity of the intesi license for their applet.

DocumentURL = the URL of a pdf file. Since we use seam-pdf reports we need to render them in a mock facescontext so that the page does not
			  change on the user's browser, but the server can read the contents of the rendered pdf and save the bytes in a pdf file.
			  We pass a series of parameters to let mockPDFFileSaver.savePDF() read and save the files we want.
			  Debug the method for detailed understanding, if you need to modify it. 
			  
PostURL     = URL to a servlet that will receive a byte stream. This servlet must be able to receive file uploads, and if you use "phikNet/SignedFileSaver"
              of the "phikNet" project you'll get a servlet that will do the following:
            
            
              a) save the stream to a temporary location (under //SOLUTION_NAME/pdf/reportname_signed.tmp path) as a SIGNED, READABLE PDF
                 Change extension from tmp to pdf to test yourself.
            
              b) in the servlet we retrieve the signed pdf, we extract its certificate from the signature and use its data to add to create
                 again another copy of the first file 
               
              c) as the intesi applet listens to your servlet's response parameters, we instruct it to accept the modified pdf (that is not
                 signed, as modifying signed pdf voids the signature) and to sign it silently. The user does not have to reenter any pin.
               
              d) save again the modified-pdf strem that now is a signed pdf. Delete previous temporary files. 


				READ INTESI PKNET DOCUMENTATION FOR FULL PARAMETERS GUIDE 

==============================================================================================================================================

 ..end
