package com.phi.entities.baseEntity;

/**
 * Partecipanti generated by hbm2java
 */

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.envers.Audited;
import com.phi.entities.baseEntity.BaseEntity;
import java.util.Date;
import javax.persistence.CascadeType;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import org.hibernate.annotations.Index;
import org.hibernate.annotations.ForeignKey;
import com.phi.entities.baseEntity.Attivita;
import com.phi.entities.role.Operatore;
import javax.persistence.ManyToOne;


import java.util.ArrayList;
import java.util.List;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.ManyToMany;
import org.hibernate.annotations.IndexColumn;
import org.hibernate.envers.AuditJoinTable;


import com.phi.entities.baseEntity.ProgettoAssociato;
@Entity
@Table(name = "partecipanti")
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
@Audited
public class Partecipanti extends BaseEntity implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 2445124669128242589L;

	/**
	*  javadoc for disponibilitaOperatore
	*/
	private Double disponibilitaOperatore;

	@Column(name="disponibilita_operatore")
	public Double getDisponibilitaOperatore(){
		return disponibilitaOperatore;
	}

	public void setDisponibilitaOperatore(Double disponibilitaOperatore){
		this.disponibilitaOperatore = disponibilitaOperatore;
	}

	/**
	*  javadoc for costoNomina
	*/
	private Double costoNomina;

	@Column(name="costo_nomina")
	public Double getCostoNomina(){
		return costoNomina;
	}

	public void setCostoNomina(Double costoNomina){
		this.costoNomina = costoNomina;
	}

	/**
	*  javadoc for caricoAtteso
	*/
	private Double caricoAtteso;

	@Column(name="carico_atteso")
	public Double getCaricoAtteso(){
		return caricoAtteso;
	}

	public void setCaricoAtteso(Double caricoAtteso){
		this.caricoAtteso = caricoAtteso;
	}

	/**
	*  javadoc for note
	*/
	private String note;

	@Column(name="note", length = 4000)
	public String getNote(){
		return note;
	}

	public void setNote(String note){
		this.note = note;
	}

	/**
	*  javadoc for numeroPraticheMod
	*/
	private Double numeroPraticheMod;

	@Column(name="numero_pratiche_mod")
	public Double getNumeroPraticheMod(){
		return numeroPraticheMod;
	}

	public void setNumeroPraticheMod(Double numeroPraticheMod){
		this.numeroPraticheMod = numeroPraticheMod;
	}

//	/**
//	*  javadoc for caricoProgettoMod
//	*/
//	private Double caricoProgettoMod;
//
//	@Column(name="carico_progetto_mod")
//	public Double getCaricoProgettoMod(){
//		return caricoProgettoMod;
//	}
//
//	public void setCaricoProgettoMod(Double caricoProgettoMod){
//		this.caricoProgettoMod = caricoProgettoMod;
//	}

	/**
	*  javadoc for numeroPratiche
	*/
	private Double numeroPratiche;

	@Column(name="numero_pratiche")
	public Double getNumeroPratiche(){
		return numeroPratiche;
	}

	public void setNumeroPratiche(Double numeroPratiche){
		this.numeroPratiche = numeroPratiche;
	}

	/**
	*  javadoc for caricoProgetto
	*/
	private Double caricoProgetto;

	@Column(name="carico_progetto")
	public Double getCaricoProgetto(){
		return caricoProgetto;
	}

	public void setCaricoProgetto(Double caricoProgetto){
		this.caricoProgetto = caricoProgetto;
	}


	/**
	*  javadoc for progettoAssociato
	*/
	private ProgettoAssociato progettoAssociato;

	@ManyToOne(fetch=FetchType.LAZY, cascade=CascadeType.PERSIST)
	@JoinColumn(name="progetto_associato_id")
	@ForeignKey(name="FK_Prtcipnti_progttoAssocto")
	@Index(name="IX_Prtcipnti_progttoAssocto")
	public ProgettoAssociato getProgettoAssociato(){
		return progettoAssociato;
	}

	public void setProgettoAssociato(ProgettoAssociato progettoAssociato){
		this.progettoAssociato = progettoAssociato;
	}


	/**
	*  javadoc for rfp
	*/
	private Boolean rfp;

	@Column(name="rfp")
	public Boolean getRfp(){
		return rfp;
	}

	public void setRfp(Boolean rfp){
		this.rfp = rfp;
	}

	/**
	*  javadoc for rdp
	*/
	private Boolean rdp;

	@Column(name="rdp")
	public Boolean getRdp(){
		return rdp;
	}

	public void setRdp(Boolean rdp){
		this.rdp = rdp;
	}

	/**
	*  javadoc for attivita
	*/
	private Attivita attivita;

	@ManyToOne(fetch=FetchType.LAZY, cascade=CascadeType.PERSIST)
	@JoinColumn(name="attivita_id")
	@ForeignKey(name="FK_Partecipanti_attivita")
	//@Index(name="IX_Partecipanti_attivita")
	public Attivita getAttivita(){
		return attivita;
	}

	public void setAttivita(Attivita attivita){
		this.attivita = attivita;
	}

	/**
	*  javadoc for operatore
	*/
	private Operatore operatore;

	@OneToOne(fetch=FetchType.LAZY, cascade=CascadeType.PERSIST)
	@JoinColumn(name="operatore_id")
	@ForeignKey(name="FK_Partecipanti_operatore")
	//@Index(name="IX_Partecipanti_operatore")
	public Operatore getOperatore(){
		return operatore;
	}

	public void setOperatore(Operatore operatore){
		this.operatore = operatore;
	}

	@Override
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "Partecipanti_sequence")
	@SequenceGenerator(name = "Partecipanti_sequence", sequenceName = "Partecipanti_sequence")
	@Column(name = "internal_id")
	public long getInternalId() {
		return internalId;
	}
	
	@Override
	public void setInternalId(long internalId) {
		this.internalId = internalId;
	}
	
	/**
	*  javadoc for dataInizio - Data inizio attività
	*/
	private Date dataInizio;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_inizio")
	public Date getDataInizio(){
		if (dataInizio==null) {
			if (this.getAttivita()!=null)
				return this.getAttivita().getDataInizio();
		}
		
		return dataInizio;
	}

	public void setDataInizio(Date dataInizio){
		this.dataInizio = dataInizio;
	}
	
	/**
	*  javadoc for dataFine - Data fine attività
	*/
	private Date dataFine;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_fine")
	public Date getDataFine(){
		if (dataFine==null){
			if (this.getAttivita()!=null)
				return this.getAttivita().getDataFine();
		}
		
		return dataFine;
	}

	public void setDataFine(Date dataFine){
		this.dataFine = dataFine;
	}
	
}
