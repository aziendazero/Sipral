<html>
	<head>
		<title>Analizzatore di log</title>
		<script src="../common/js/jquery.min.js"></script>
		<script type="text/javascript" src="js/flot/jquery.0.7.flot.min.js"></script>
		<script type="text/javascript" src="js/flot/jquery.0.7.flot.time.js"></script>
		<script type="text/javascript" src="js/flot/jquery.0.7.flot.axislabels.js"></script>
		<script type="text/javascript" src="js/flot/jquery.0.7.flot.resize.js"></script>
	</head>
	<body> 
		<style>
			
			html,body {
				height: 100%;
				width: 100%;
				margin: 0;
				font-family:'Anonymous Pro',sans-serif;
			}

			:after, :before {
				-webkit-box-sizing: border-box;
				-moz-box-sizing: border-box;
				box-sizing: border-box;
			}

			* {
				-webkit-box-sizing: border-box;
				-moz-box-sizing: border-box;
				box-sizing: border-box;
			}

			#sessionTable {
				display: none;
			}

			#fileChooser {
				position: fixed;
				left: 0;
				bottom: 0;
				background-color: rgba(0,0,0,0.8);
				height: 42px;
				width: 100%;
				padding: 10px;
				text-align: center;
				color: #fff;
				font-size: 18px;
				cursor: pointer;
				z-index: 10;
			}

			#text{
				cursor: pointer;
			}

			#noMessage {
				z-index:-1;
				margin:auto;
				position: fixed;
				top:0;
				left:0;
				width: 100%;
				height: 100%;
			}

			#noMessageInner {
				margin:auto;
				position: relative;
				top: 50%;
				transform: translateY(-50%);
				color:#999;
				font-size: 30px;
				text-align: center;
			}

			#loader {
				z-index:1000;
				background-color: #fff;
				position: fixed;
				top:0;
				left:0;
				width: 100%;
				height: 100%;
				display: none;
				cursor:progress;
			}

			#loaderInner {
				margin:auto;
				position: relative;
				top: 50%;
				transform: translateY(-50%);
				color:#999;
				font-size: 30px;
				text-align: center;
				cursor:progress;
			}

			.tab {
				width:85%;
				margin: 20px auto 40px auto;
				border-collapse: collapse;
				table-layout:fixed;

				-webkit-transition: all .2s;
				-moz-transition: all .2s;
				-ms-transition: all .2s;
				-o-transition: all .2s;
				transition: all .2s;
			}

			.tab td {
				padding:2px;
				text-overflow: ellipsis;
				width: 200px;
				white-space: nowrap;
				overflow: hidden;
			} 

			.tab td.mini {
				width: 10px;
			}

			h1, h2 {
				text-align: center;
			}

			.tab td:hover {
				overflow: visible;
				white-space: normal;
			}

			.tab tr:hover {
				color: #fff;
				background-color: #333 !important;
				cursor:pointer;
			}

			.tab tr.active {
				background-color: #ff9;
			}

			.tab tr.active td {
				overflow: visible;
				white-space: normal;
			}

			#mainContainer {
				padding-top: 20px;
				width: 100%;
				background-color: #fff;
			}

			@keyframes pulseAnimation {
				0%   { opacity: 0.2; }
				50%  { opacity: 1; }
				100% { opacity: 0.2; }
			}

			#loaderInner {
  				-webkit-animation: pulseAnimation 2s infinite; /* Safari 4+ */
  				-moz-animation:    pulseAnimation 2s infinite; /* Fx 5+ */
  				-o-animation:      pulseAnimation 2s infinite; /* Opera 12+ */
  				animation:         pulseAnimation 2s infinite; /* IE 10+, Fx 29+ */
			}

			.centered {
				margin: 0 auto;
				text-align: center;
			}

			button {
				font-family: 'Anonymous Pro',sans-serif;
				border: solid 1px #999;
				color: #eee;
				border-radius: 2px;
				-moz-border-radius: 2px;
				background-color: #333;
				padding: 6px;
				font-size: 15px;
				cursor: hand;
			}

			button:hover {
				background-color: #666;
				color: white;
			}

			input {
				font-family: 'Anonymous Pro',sans-serif;
				border: solid 1px #999;
				border-radius: 2px;
				-moz-border-radius: 2px;
				padding: 6px;
				font-size: 15px;
			}

			.graph {
				width: 85%;
				height: 600px;
				margin: 20px auto 0px auto;
			}

			.notInTop10 {
				display: none;
			}

		</style>

		<div id="noMessage"><div id="noMessageInner">Nessun log caricato</div></div>

		<div id="loader">
			<div id="loaderInner">Caricamento <span id="counter"></span></div>
		</div>

		<div id="fileChooser" onclick="fireFileSelection()">
			<input id="file" type="file" accept=".log" onchange="readBlob()" style="display:none"/>
			<span id="text">Scegli un file .log</span>
			(analizza tutto subito<input id="analyzeAll" type="checkbox" checked="true" />)
		</div>
		
		<div id="fileChooser2">
			<input type="text" name="search" id="search" placeholder="Type Something" list="searchresults" autocomplete="off">
			<datalist id="searchresults"></datalist>
			<span id="text">Scegli un file da server</span>
		</div>
		
		<div id="mainContainer">
			<h1>Analisi del log</h1>
			<h2>Sessioni</h2>
			<div class="centered">
				<button onclick="showLoader('sessioni',retrieveSessions)">analizza</button>
			</div>
			<table class="tab">
				<tbody id="sessionTable">
					<tr>
						<td id="sessCr" class="mini">?</td>
						<td>Sessions created</td>
					</tr>
					<tr>
						<td id="sessEx" class="mini">?</td>
						<td>Sessions expired</td>
					</tr>
					<tr><td>&nbsp;</td><td></td></tr>
					<tr>
						<td id="sessKi" class="mini">?</td>
						<td>Killed sessions</td>
					</tr>
					<tr><td>&nbsp;</td><td></td></tr>
					<tr>
						<td id="sessFl" class="mini">?</td>
						<td>Flush</td>
					</tr>
					<tr><td>&nbsp;</td><td></td></tr>
					<tr>
						<td id="sessCoFirst" class="mini">?</td>
						<td>First conversation id</td>
					</tr>
					<tr>
						<td id="sessCoLast" class="mini">?</td>
						<td>Last conversation id</td>
					</tr>
				</tbody>
			</table>
			
			<h2>Processi avviati</h2>
			<div class="centered">
				<button onclick="showLoader('processi avviati',retrieveProcesses)">analizza</button>
			</div>
			<table class="tab" id="processesTable"></table>

			<h2>Sottoprocessi avviati</h2>
			<div class="centered">
				<button onclick="showLoader('sottoprocessi avviati',retrieveSubProcesses)">analizza</button>
			</div>
			<table class="tab" id="subprocessesTable"></table>		

			<h2>Ultime attivit&agrave;</h2>
			<div class="centered">
				<button onclick="showLoader('ultime attivit&agrave;',retrieveLastActivity)">analizza</button>
			</div>
			<table class="tab" id="lastActivityTable"></table>

			<h2>Attivit&agrave;</h2>
			<div class="centered">
				<button onclick="showLoader('ultime attivit&agrave;',retrieveActivityGraph)">analizza</button>
			</div>
			<div id="activityGraph-placeholder" class="graph"></div>
			<table class="tab" id="activityGraphTable"></table>

			<h2>Utilizzo RAM</h2>
			<div class="centered">
				<button onclick="showLoader('utilizzo RAM',retrieveRAM)">analizza</button>
			</div>
			<div id="ramGraph-placeholder" class="graph"></div>
			<table class="tab"></table>

			<h2>Errori</h2>
			<div class="centered">
				<button onclick="showLoader('errori',retrieveErrors)">analizza</button>
			</div>
			<table class="tab" id="errorTable"></table>

			<h2>Attivit&agrave; utente</h2>
			<div class="centered">
				<input id="userFilter" type="text" placeholder="username"></input>
				<button onclick="showLoader('attivit&agrave utente',retrieveUser)">filtra</button>
			</div>
			<table class="tab" id="userTable"></table>
		</div>

		<script> 

		$(function(){
			$("#mainContainer").hide();
			
			$("#search").on("input", function(e) {
				var val = $(this).val();
				//console.log(val);
				getLog(val);
			});
			
			$.get("../resource/rest/websessions/filenames", null, function(res) {
					var dataList = $("#searchresults");
					dataList.empty();
					if(res.length) {
						for(var i=0, len=res.length; i<len; i++) {
							var opt = $("<option></option>").attr("value", res[i]);
							dataList.append(opt);
						}
					}
				},"json");
		})

		function getLog(name) {
			$.get("../resource/rest/websessions/file/"+name, null, function(res) {
				//console.log(res);
				parseLog(res);
			});
		}
		
		function fireFileSelection() {
			var btn = document.getElementById('file');
			btn.click();
		}

		function retrieveUser() {
			//showLoader("attivit&agrave utente");
			//var regexp = new RegExp(".*\\\|" + $("#userFilter").val() + "\\\].*","gm");
			//var log = currentLog.match(regexp);
			var log = findInLog("|" + $("#userFilter").val() + "]");
			var table = $("#userTable");
			table.html("");
			if (log!=null) {
				for (var i=0; i<log.length; i++) {
					table.append("<tr><td>" + log[i] + "</td></tr>");
				}	
			}
			//hideLoader();
		}

		function retrieveErrors() {
		//	showLoader("errori");
			//var log = currentLog.match(/.*ERROR \[.*|Caused by:.*/gm);
			var log = findInLogOr("ERROR [", "Caused by:", "at com.phi.");
			var table = $("#errorTable");

			table.html("");
			var error = false;
			for (var i=0; i<log.length; i++) {
				error = log[i].indexOf("ERROR [") != -1;
				table.append("<tr><td" + (error?' style="color:#f00"':' style="color:#aaa"') +">" + log[i] + "</td></tr>");
			}

/*
			table.html();
			var toAppend = "<tr><td>";
			for (var i=0; i<log.length; i++) {
				if (log[i].indexOf("ERROR [") != -1) {
					toAppend += "</td></tr><tr><td>";	
				}
				toAppend += log[i] + "<br>";
			}
			table.append(toAppend + "</td></tr>");
*/

		//	hideLoader();
		}

		function retrieveLastActivity() {
			var log = findInLog("[cid=");
			var table = $("#lastActivityTable");
			table.html("");

			var usernames = new Array();
			var date, username = "";
			var count = 0;
			var toAppend = "";
			for (var i = log.length-1; i>0; i--) {
				date = log[i].replace(/([^\s]+\s[^\s]+)\s.*/g, "$1");
				username = log[i].replace(/.*\|([^\]]+)\].*/g, "$1").toLowerCase();
				if (usernames.indexOf(username) === -1){
					count++;
					toAppend = "<tr";
					if (count > 10) {
						toAppend += ' class="notInTop10"';
					}
					toAppend += "><td>" + toDateString(toTime(date)) + " " + username + "</td></tr>"
					table.append(toAppend);	
					usernames.push(username);
				}
			}
			if (count > 10) {
				table.append('<tr class="showMore"><td>mostra altri...</td></tr>');	
			}
		}

		function retrieveActivityGraph() {
			var log = findInLog("INFO  [");
			var table = $("#activityGraphTable");
			table.html("");

			var lastdatemin, datemin, lastdateh, dateh;
			var countmin = 0;
			var counth = 0;
			var activityGraphDataMin = new Array();
			var activityGraphDataH = new Array();

			var activityGraphDataInt = new Array();
			var dateInt;
			var countInt = 0;

			for (var i = 0; i < log.length; i++) {
				datemin = log[i].substring(0,16); //2015-07-08 09
/*
				if (lastdatemin!=datemin) {
					addPoint(activityGraphDataMin,datemin+":00,000",countmin);
					countmin = 0;
					lastdatemin = datemin;
				} else {
					countmin++;
				}
*/
				dateh = log[i].substring(0,13); //2015-07-08 09
				if (lastdateh!=dateh) {
					addPoint(activityGraphDataH,dateh+":00:00,000",counth);
					counth = 0;
					lastdateh = dateh;
				} else {
					counth++;
				}
				addPoint(activityGraphDataH,dateh+":00:00,000",counth);
/*
				dateInt = log[i].substring(0,23);
				countInt++;
				if (i%200 === 0) {
					addPoint(activityGraphDataInt,dateInt,countInt);	
				}				
*/
			}

			$("#activityGraph-placeholder").show();

			var dataset = [
			   {
			        label: "Interazioni ogni ora",
			        data: activityGraphDataH,
			        color: "#333",
			        points: {show: false},
			        lines: {show: true, fill: true},
			        shadowSize: 3
			    }
			    /*,{
			        label: "Interazioni ogni 10 min",
			        data: activityGraphDataMin,
			        color: "#fff",
			        points: {show: false},
			        lines: {show: false},
			        bars: {show: true, align: "center", barWidth: 1},
			        shadowSize: 0
			    }
			    /*,{
			        label: "Integrale interazioni",
			        data: activityGraphDataInt,
			        color: "#afa",
			        points: {show: false},
			        lines: {show: true},
			        bars: {show: false},
			        shadowSize: 0
			    }
				*/
			];

			var options = {
				grid: {hoverable: true},
				yaxis: {
				    color: "black",
				    tickDecimals: 2,
				    axisLabel: "Numero interazioni",
				    axisLabelUseCanvas: true,
				    axisLabelFontSizePixels: 12,
				    axisLabelFontFamily: 'Anonymous Pro, Arial',
				    axisLabelPadding: 10,
				    min: 0
				},

				xaxes: [{
				    mode: "time",        
				    tickFormatter: function (val, axis) {            
				        return toDateString(val);
				    },
				    color: "black",
				    position: "bottom",        
				    axisLabel: "Data",
				    axisLabelUseCanvas: true,
				    axisLabelFontSizePixels: 12,
				    axisLabelFontFamily: 'Anonymous Pro, Arial',
				    axisLabelPadding: 10
				}]
			}; 

			$.plot($("#activityGraph-placeholder"), dataset, options);//	hideLoader();
			
			$("#activityGraph-placeholder").unbind("plothover");
			$("#activityGraph-placeholder").bind("plothover", toolTipManagerActivity);
		}

		function retrieveProcesses() {
		//	showLoader("processi");
			//var log = currentLog.match(/.*Starting process:.*/gm);
			var log = findInLog("Starting process:");
			var processes = new Array();
			var processesCounter = new Array();
			var process = "";
			var pindex = -1;

			for (var i=0; i<log.length; i++) {
				//process = log[i].replace(/(?:.*Starting process: )(.*)/gm, "$1");
				process = log[i].substring(log[i].indexOf("Starting process:") + 18,log[i].length);
				pindex = processes.indexOf(process);
				if (pindex == -1) {
					processes.push(process);
					processesCounter.push({name:process,counter:1});
				} else {
					processesCounter[pindex].counter++;
				}
			}
			
			processesCounter.sort(compare);

			var table = $("#processesTable");
			table.html("");
			var toAppend = "";
			for (var i=0; i<processes.length; i++) {
				toAppend = '<tr';
				if (i>10) {
					toAppend += ' class="notInTop10"';
				}
				toAppend += '><td class="mini">' + processesCounter[i].counter + '</td><td>' + processesCounter[i].name + '</td></tr>'
				table.append(toAppend);
			}
			if (i>10) {
				table.append('<tr class="showMore"><td colspan=2>mostra altri...</td></tr>');	
			}
		//	hideLoader();
		}

		function retrieveSubProcesses() {
			//var log = currentLog.match(/.*Starting subproc: .*/gm);
			var log = findInLog("Starting subproc: ");
			var processes = new Array();
			var processesCounter = new Array();
			var process = "";
			var pindex = -1;
			
			for (var i=0; i<log.length; i++) {
				//process = log[i].replace(/(?:.*Starting subproc: )(.*)/gm, "$1");
				process = log[i].substring(log[i].indexOf("Starting subproc:") + 18,log[i].length);
				pindex = processes.indexOf(process);
				if (pindex == -1) {
					processes.push(process);
					processesCounter.push({name:process,counter:1});
				} else {
					processesCounter[pindex].counter++;
				}
			}
			
			processesCounter.sort(compare);

			var table = $("#subprocessesTable");
			table.html("");
			var toAppend = "";
			for (var i=0; i<processes.length; i++) {
				toAppend = '<tr';
				if (i>10) {
					toAppend += ' class="notInTop10"';
				}
				toAppend += '><td class="mini">' + processesCounter[i].counter + '</td><td>' + processesCounter[i].name + '</td></tr>'
				table.append(toAppend);
			}
			if (i>10) {
				table.append('<tr class="showMore"><td colspan=2>mostra altri...</td></tr>');	
			}
		//	hideLoader();
		}

		function compare(a,b) {
			if (a.counter > b.counter)
				return -1;
			if (a.counter < b.counter)
				return 1;
			return 0;
		}

		function retrieveSessions() {
			$("#sessionTable").show();
			$("#sessCr").html(occurrences(currentLog,"Session created",false));
			$("#sessKi").html(occurrences(currentLog,"Killed session",false));
			$("#sessEx").html(occurrences(currentLog,"Session expired",false));
			$("#sessFl").html(occurrences(currentLog,"FLUSHED",false));
			retrieveConversations();
		}

		function retrieveConversations() {
			var logPiece = currentLog.substring(currentLog.lastIndexOf("[cid=") + 5,currentLog.length);
			logPiece = logPiece.substring(0,logPiece.indexOf("|"));
			var convId = parseInt(logPiece);
			$("#sessCoLast").html(convId);


			logPiece = currentLog.substring(currentLog.indexOf("[cid=") + 5,currentLog.length);
			logPiece = logPiece.substring(0,logPiece.indexOf("|"));
			convId = parseInt(logPiece);
			$("#sessCoFirst").html(convId);
		}

		function retrieveRAM() {
			//	showLoader("utilizzo RAM");
			$("#ramGraph-placeholder").show();

			var graphData1 = new Array();
			var graphData2 = new Array();

			var log = findInLog("JVM HEAP");

			if (log.length === 0) {
				return;
			};

			var date;
			var usedMem;
			var maxMem = parseInt(log[0].replace(/.* INFO  \[com\.phi\.cs\.timer\.PerformanceLogger\].*Used: (.*)MB  Free: .*/g, "$1"));
			maxMem += parseInt(log[0].replace(/.* INFO  \[com\.phi\.cs\.timer\.PerformanceLogger\].*Used: .*MB  Free: (.*).*/g, "$1"));

			for (var i=0; i<log.length; i++) {
				date = log[i].replace(/(.*) INFO  .*/g, "$1");
				usedMem = log[i].replace(/.* INFO  \[com\.phi\.cs\.timer\.PerformanceLogger\].*Used: (.*)MB  Free: .*/g, "$1");
				usedMemAverage = maxMem - parseInt(log[i].replace(/.* INFO  \[com\.phi\.cs\.timer\.PerformanceLogger\].*FreeAverage (.*)MB.*/g, "$1"));
				
				addPoint(graphData1,date,usedMem);
				addPoint(graphData2,date,usedMemAverage);
			}

			var dataset = [
			    {
			        label: "RAM utilizzata media",
			        data: graphData2,
			        color: "#aaa",
			        points: {show: false},
			        lines: {show: true},
			        shadowSize: 0
			    },{
			        label: "RAM utilizzata",
			        data: graphData1,
			        color: "#333",
			        points: {fillColor: "#999", show: false },
			        lines: {
				        show: true,
				        fill: true
				    }
			    }

			];

			var options = {
				series: {
				    shadowSize: 5,
				},

				grid: {
				    hoverable: true
				},

				yaxis: {
				    color: "black",
				    tickDecimals: 2,
				    axisLabel: "RAM utilizzata in MB",
				    axisLabelUseCanvas: true,
				    axisLabelFontSizePixels: 12,
				    axisLabelFontFamily: 'Anonymous Pro, Arial',
				    axisLabelPadding: 10,
				    max: maxMem,
				    min: 0
				},

				xaxes: [{
				    mode: "time",        
				    tickFormatter: function (val, axis) {            
				        return toDateString(val);
				    },
				    color: "black",
				    position: "bottom",        
				    axisLabel: "Data",
				    axisLabelUseCanvas: true,
				    axisLabelFontSizePixels: 12,
				    axisLabelFontFamily: 'Anonymous Pro, Arial',
				    axisLabelPadding: 10
				}]
			}; 

			$.plot($("#ramGraph-placeholder"), dataset, options);//	hideLoader();
			
			$("#ramGraph-placeholder").unbind("plothover");
			$("#ramGraph-placeholder").bind("plothover", toolTipManager);
       	}

       	var previousPoint = null;

       	function toolTipManager(event, pos, item) {
            if (item) {
                if (previousPoint != item.dataIndex) {

                    previousPoint = item.dataIndex;

                    $("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2),
                    y = item.datapoint[1].toFixed(2);

                    showTooltip(item.pageX, item.pageY,
                        "RAM utilizzata il " + toDateString(x) + " = " + y + " MB");
                }
            } else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        }

       	function toolTipManagerActivity(event, pos, item) {
            if (item) {
                if (previousPoint != item.dataIndex) {

                    previousPoint = item.dataIndex;

                    $("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2),
                    y = item.datapoint[1].toFixed(2);

                    showTooltip(item.pageX, item.pageY,
                        parseInt(y) + " interazioni nell'ora " + toDateString(x));
                }
            } else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        }

       	function showTooltip(x, y, contents) {
            $("<div id='tooltip'>" + contents + "</div>").css({
                position: "absolute",
                display: "none",
                top: y + 5,
                left: x + 5,
                border: "1px solid #ddd",
                padding: "2px",
                "background-color": "#eee",
                opacity: 0.80
            }).appendTo("body").fadeIn(200);
        }

		function addPoint(dataArray,time,value) {
			dataArray.push([toTime(time),value]);
		}

		function toTime(timestr) {
			//2015-07-06 09:28:01,406
			var time = timestr.split(" ");
			var date = time[0].split("-");
			var hours = time[1].split(",");
			var hour = hours[0].split(":");

			return new Date(date[0],date[1] - 1,date[2],hour[0],hour[1],hour[2],hours[1]).getTime();
		}

		var currentLog = "";
		var logRows = new Array();

		function readBlob(opt_startByte, opt_stopByte) {
			
		    var files = document.getElementById('file').files;
		    if (!files.length) {
		      alert('Scegli un file .log');
		      $('#text').html('Scegli un file .log');
		      return;
		    }

		    var file = files[0];

		    $('#text').html(file.name + " (" + toDateString(file.lastModified) + ")");

		    var start = parseInt(opt_startByte) || 0;
		    var stop = parseInt(opt_stopByte) || file.size - 1;

		    var reader = new FileReader();

		    showLoader();
		    // If we use onloadend, we need to check the readyState.
		    reader.onloadend = function(evt) {
		      if (evt.target.readyState == FileReader.DONE) { // DONE == 2
					parseLog(evt.target.result);
				}
		    };

		    var blob = file.slice(start, stop + 1);
		    reader.readAsBinaryString(blob);
		}

		function parseLog(log) {
			currentLog = log;
					
			var startingLogEndingPos = isPresent(currentLog, "Started J2EE application", false);
			if (startingLogEndingPos>-1) {
				currentLog = currentLog.substring(startingLogEndingPos, currentLog.length);
				currentLog = currentLog.substring(currentLog.indexOf("\n")+1, currentLog.length);
			}

			logRows = currentLog.split("\n");
			$("#mainContainer").show();

			if ($("#analyzeAll").is(':checked')) {
				retrieveSessions();
				retrieveErrors();
				retrieveProcesses();
				retrieveSubProcesses();
				retrieveActivityGraph();
				retrieveLastActivity();
				retrieveRAM();
				retrieveUser();
				activateTable();	
			} else {
				$("#processesTable").html("");
				$("#subprocessesTable").html("");
				$("#errorTable").html("");
				$("#userTable").html("");
				$("#lastActivityTable").html("");
				$("#sessionTable").hide();
				$("#ramGraph-placeholder").hide();
				$("#activityGraph-placeholder").hide();
			}
			hideLoader();
		}
		
		function toDateString(timestamp) {
			date = new Date(parseInt(timestamp)),
			datevalues = [
			   date.getFullYear(),
			   date.getMonth()+1,
			   date.getDate(),
			   pad(date.getHours()),
			   pad(date.getMinutes()),
			   pad(date.getSeconds()),
			];
			//alert(datevalues); //=> [2011, 3, 25, 23, 0, 0]
			return datevalues[2] + "/" + datevalues[1] + "/" + datevalues[0] + " " + datevalues[3] + ":" + datevalues[4] + ":" + datevalues[5];
		}

		function pad(number) {
			if (parseInt(number)<10) {
				return "0"+number;
			} 
			return number;
		}

		function occurrences(string, subString, allowOverlapping){
		    string+=""; subString+="";
		    if(subString.length<=0) return string.length+1;

		    var n=0, pos=0;
		    var step=(allowOverlapping)?(1):(subString.length);

		    while(true){
		        pos=string.indexOf(subString,pos);
		        if(pos>=0){ n++; pos+=step; } else break;
		    }
		    return(n);
		}

		function isPresent(string, subString, allowOverlapping){
		    string+=""; subString+="";
		    if(subString.length<=0) return string.length+1;

		    var n=0, pos=0;
		    var step=(allowOverlapping)?(1):(subString.length);

		    while(true){
		        pos=string.indexOf(subString,pos);
		        if(pos>=0){return pos;} else break;
		    }
		    return -1;
		}

		function findInLog(subString){
			return $.grep(logRows, function(row, index) {
			    return row.indexOf(subString) != -1;
			});
		}

		function findInLogOr(subString1,subString2,subString3){
			return $.grep(logRows, function(row, index) {
			    return (row.indexOf(subString1) != -1 || row.indexOf(subString2) != -1 || row.indexOf(subString3) != -1);
			});
		}

		var nextfunction;

		function showLoader(message, functiontocall) {
			if (!message) {
				message = "";
			}
			nextfunction = functiontocall;
			$('#counter').html(message);
			$('body').css('overflow-y','hidden');
			$('#loader').fadeIn(150,
				function() {
					if (nextfunction) {
						nextfunction();
						nextfunction = null;
						activateTable();
						hideLoader();
					}		
				}
			);		
		}

		function hideLoader() {
			$('#loader').fadeOut(500);
			$('body').css('overflow-y','visible');
		}

		function activateTable(){
			$('.tab').each(
				function () {
					$(this).find('tr').each(
						function () {
							$(this).unbind("click");
							$(this).click(
								function () {
									$(this).toggleClass("active");
								}
							);	
						}
					);

					$(this).find('.showMore').each(
						function () {
							$(this).unbind("click");
							$(this).click(
								function () {
									$(this).parent().find('.notInTop10').show();
									$(this).hide();
								}
							);	
						}
					);
				}
			);
		}
		</script> 
	</body>
</html>