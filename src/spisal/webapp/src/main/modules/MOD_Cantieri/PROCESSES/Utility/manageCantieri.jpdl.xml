<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="manageCantieri">


	<start-state name="start-state1">
		<transition to="coming from?"></transition>
	</start-state>


	<decision name="coming from?" expression="#{(button.getMnemonic())}">
		<transition to="super-state1/eliminazione logica" name="delCantiere"></transition>
		<transition to="set cantiere temporary" name="newCantiere"></transition>
		<transition to="setReadOnlyIf" name="editCantiere"></transition>
		<transition to="inject new" name="BtnNotificaCantiere"></transition>
		<transition to="read stuff" name="BtnEditNotificaCantiere"></transition>
		<transition to="super-state3/Clonazione cantiere" name="clonaCantiere"></transition>
		<transition to="setReadOnlyIf" name="operation"></transition>
	</decision>

	<super-state name="super-state1">
		<node name="eliminazione logica">
			<event type="node-enter">
				<action name="1" expression="#{Cantiere.setIsActive(false)}"></action>
				<action name="2" expression="#{CantiereAction.create()}"></action>
			</event>
			<transition to="../ejectDeleted"></transition>
		</node>
	</super-state>

	<task-node name="edit cantiere">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_Cantieri/FORMS/edit_cantiere')}"></action>
		</event>
		<transition to="next?"></transition>
	</task-node>

	<node name="inject new">
		<event type="node-enter">
			<action name="1" expression="#{CantiereAction.inject(CantiereAction.newEntity())}"></action>
			<action name="2" expression="#{CommittenteAction.injectEmptyList('CommittenteList')}"></action>
			<action name="3" expression="#{CommittenteAction.injectEmptyList('ToRemoveCommittenteList')}"></action>
			<action name="4" expression="#{PersoneCantiereAction.injectEmptyList('PersoneCantiere1List')}"></action>
			<action name="5" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere1List')}"></action>
			<action name="6" expression="#{PersoneCantiereAction.injectEmptyList('PersoneCantiere2List')}"></action>
			<action name="7" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere2List')}"></action>
			<action name="8" expression="#{PersoneCantiereAction.injectEmptyList('PersoneCantiere3List')}"></action>
			<action name="9" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere3List')}"></action>
			<action name="10" expression="#{DitteCantiereAction.injectEmptyList('DitteCantiereList')}"></action>
			<action name="11" expression="#{DitteCantiereAction.injectEmptyList('ToRemoveDitteCantiereList')}"></action>
			<action name="12" expression="#{TagCantiereAction.injectEmptyList('TagCantiereList')}"></action>
			<action name="13" expression="#{TagCantiereAction.injectEmptyList('ToRemoveTagCantiereList')}"></action>
			<action name="14" expression="#{CantiereAction.temporary.put('hasPratiche',false)}"></action>
		</event>
		<transition to="setIsNotifica"></transition>
	</node>

	<decision name="next?" expression="#{(button.getMnemonic())}">
		<transition to="refresh" name="BtnBack"></transition>
		<transition to="CantiereStuff" name="delCommittente"></transition>
		<transition to="CantiereStuff" name="addCommittente"></transition>
		<transition to="CantiereStuff" name="addPerson1"></transition>
		<transition to="CantiereStuff" name="delPerson1"></transition>
		<transition to="CantiereStuff" name="addPerson2"></transition>
		<transition to="CantiereStuff" name="delPerson2"></transition>
		<transition to="CantiereStuff" name="addPerson3"></transition>
		<transition to="CantiereStuff" name="delPerson3"></transition>
		<transition to="CantiereStuff" name="addDitta"></transition>
		<transition to="CantiereStuff" name="delDitta"></transition>
		<transition to="CantiereStuff" name="addType"></transition>
		<transition to="CantiereStuff" name="delType"></transition>
		<transition to="is valid?" name="BtnSave"></transition>
		<transition to="Add temporary" name="BtnProcPratiche"></transition>
		<transition to="set temporary" name="associa"></transition>
		<transition to="CantiereStuff" name="getDeviceLocation"></transition>
		<transition to="CantiereStuff" name="pickLocationFromMap"></transition>
		<transition to="CantiereStuff" name="reverseGeocode"></transition>
		<transition to="end-state2" name="BtnSelect"></transition>
		<transition to="notificheCantieri" name="notifiche"></transition>
		<transition to="super-state4/Clonazione Cantiere Immediate" name="clonaImmediate"></transition>
	</decision>

	<node name="refresh">
		<event type="node-enter">
			<action name="1" expression="#{CantiereAction.refresh()}"></action>
		</event>
		<transition to="refresh lists"></transition>
	</node>

	<super-state name="super-state2">
		<node name="create">
			<event type="node-enter">
				<action name="1" expression="#{CantiereAction.create()}"></action>
				<action name="2" expression="#{empty Cantiere.id ? Cantiere.setId(SequenceManager.nextOf('cantieri')) : ''}"></action>
			</event>
			<transition to="../notifica?"></transition>
		</node>
	</super-state>

	<process-state name="CantiereStuff">
		<sub-process name="MOD_Cantieri/PROCESSES/Utility/cantiereStuff" binding="late"></sub-process>
		<transition to="edit cantiere"></transition>
	</process-state>

	<node name="read stuff">
		<event type="node-enter">
			<action name="1" expression="#{CommittenteAction.equal.put('isActive', true)}"></action>
			<action name="2" expression="#{CommittenteAction.equal.put('cantiere', Cantiere)}"></action>
			<action name="3" expression="#{CommittenteAction.read()}"></action>
			<action name="4" expression="#{CommittenteAction.injectEmptyList('ToRemoveCommittenteList')}"></action>
			<action name="5" expression="#{PersoneCantiereAction.equal.put('isActive',true)}"></action>
			<action name="6" expression="#{PersoneCantiereAction.equal.put('cantiere',Cantiere)}"></action>
			<action name="7" expression="#{PersoneCantiereAction.equal.put('ruolo.code','RUOLOCANT01')}"></action>
			<action name="8" expression="#{PersoneCantiereAction.injectList(PersoneCantiereAction.select(),'PersoneCantiere1List')}"></action>
			<action name="9" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere1List')}"></action>
			<action name="10" expression="#{PersoneCantiereAction.equal.put('ruolo.code','RUOLOCANT02')}"></action>
			<action name="11" expression="#{PersoneCantiereAction.injectList(PersoneCantiereAction.select(),'PersoneCantiere2List')}"></action>
			<action name="12" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere2List')}"></action>
			<action name="13" expression="#{PersoneCantiereAction.equal.put('ruolo.code','RUOLOCANT03')}"></action>
			<action name="14" expression="#{PersoneCantiereAction.injectList(PersoneCantiereAction.select(),'PersoneCantiere3List')}"></action>
			<action name="15" expression="#{PersoneCantiereAction.injectEmptyList('ToRemovePersoneCantiere3List')}"></action>
			<action name="16" expression="#{DitteCantiereAction.equal.put('isActive',true)}"></action>
			<action name="17" expression="#{DitteCantiereAction.equal.put('cantiere',Cantiere)}"></action>
			<action name="18" expression="#{DitteCantiereAction.read()}"></action>
			<action name="19" expression="#{DitteCantiereAction.injectEmptyList('ToRemoveDitteCantiereList')}"></action>
			<action name="20" expression="#{TagCantiereAction.equal.put('isActive',true)}"></action>
			<action name="21" expression="#{TagCantiereAction.equal.put('cantiere',Cantiere)}"></action>
			<action name="22" expression="#{TagCantiereAction.read()}"></action>
			<action name="23" expression="#{TagCantiereAction.injectEmptyList('ToRemoveTagCantiereList')}"></action>
		</event>
		<transition to="edit cantiere"></transition>
	</node>

	<decision name="is valid?" expression="#{CantiereAction.checkCantiere()}">
		<transition to="edit cantiere" name="false"></transition>
		<transition to="has duplicates?" name="true"></transition>
	</decision>

	<node name="refresh lists">
		<event type="node-enter">
			<action name="1" expression="#{CommittenteAction.refresh(CommittenteList.list)}"></action>
			<action name="2" expression="#{CommittenteAction.refresh(ToRemoveCommittenteList.list)}"></action>
			<action name="3" expression="#{CommittenteAction.ejectList('CommittenteList')}"></action>
			<action name="4" expression="#{CommittenteAction.ejectList('ToRemoveCommittenteList')}"></action>
			<action name="5" expression="#{PersoneCantiereAction.refresh(PersoneCantiere1List.list)}"></action>
			<action name="6" expression="#{PersoneCantiereAction.refresh(ToRemovePersoneCantiere1List.list)}"></action>
			<action name="7" expression="#{PersoneCantiereAction.ejectList('PersoneCantiere1List')}"></action>
			<action name="8" expression="#{PersoneCantiereAction.ejectList('ToRemovePersoneCantiere1List')}"></action>
			<action name="9" expression="#{PersoneCantiereAction.refresh(PersoneCantiere2List.list)}"></action>
			<action name="10" expression="#{PersoneCantiereAction.refresh(ToRemovePersoneCantiere2List.list)}"></action>
			<action name="11" expression="#{PersoneCantiereAction.ejectList('PersoneCantiere2List')}"></action>
			<action name="12" expression="#{PersoneCantiereAction.ejectList('ToRemovePersoneCantiere2List')}"></action>
			<action name="13" expression="#{PersoneCantiereAction.refresh(PersoneCantiere3List.list)}"></action>
			<action name="14" expression="#{PersoneCantiereAction.refresh(ToRemovePersoneCantiere3List.list)}"></action>
			<action name="15" expression="#{PersoneCantiereAction.ejectList('PersoneCantiere3List')}"></action>
			<action name="16" expression="#{PersoneCantiereAction.ejectList('ToRemovePersoneCantiere3List')}"></action>
			<action name="17" expression="#{DitteCantiereAction.refresh(DitteCantiereList.list)}"></action>
			<action name="18" expression="#{DitteCantiereAction.refresh(ToRemoveDitteCantiereList.list)}"></action>
			<action name="19" expression="#{DitteCantiereAction.ejectList('DitteCantiereList')}"></action>
			<action name="20" expression="#{DitteCantiereAction.ejectList('ToRemoveDitteCantiereList')}"></action>
			<action name="21" expression="#{TagCantiereAction.refresh(TagCantiereList.list)}"></action>
			<action name="22" expression="#{TagCantiereAction.refresh(ToRemoveTagCantiereList.list)}"></action>
			<action name="23" expression="#{TagCantiereAction.ejectList('TagCantiereList')}"></action>
			<action name="24" expression="#{TagCantiereAction.ejectList('ToRemoveTagCantiereList')}"></action>
			<action name="25" expression="#{userBean.hasRoleIn('VisualizzatoreNotifiche')?processManager.setReadOnly(true):processManager.setReadOnly(false)}"></action>
			<action name="26" expression="#{TipologiaCantiereAction.like.remove('type')}"></action>
			<action name="27" expression="#{Cantiere.internalId le 0 ? CantiereAction.eject() : ''}"></action>
		</event>
		<transition to="end-state2"></transition>
	</node>

	<node name="link unlink">
		<event type="node-enter">
			<action name="1" expression="#{CantiereAction.linkUnlinkCommittente(CommittenteList.list, ToRemoveCommittenteList.list)}"></action>
			<action name="1" expression="#{CantiereAction.linkUnlinkPersoneCantiere(PersoneCantiere1List.list, ToRemovePersoneCantiere1List.list)}"></action>
			<action name="1" expression="#{CantiereAction.linkUnlinkPersoneCantiere(PersoneCantiere2List.list, ToRemovePersoneCantiere2List.list)}"></action>
			<action name="1" expression="#{CantiereAction.linkUnlinkPersoneCantiere(PersoneCantiere3List.list, ToRemovePersoneCantiere3List.list)}"></action>
			<action name="1" expression="#{CantiereAction.linkUnlinkDitteCantiere(DitteCantiereList.list, ToRemoveDitteCantiereList.list)}"></action>
			<action name="1" expression="#{CantiereAction.linkUnlinkTagCantiere(TagCantiereList.list, ToRemoveTagCantiereList.list)}"></action>
		</event>
		<transition to="super-state2/create"></transition>
	</node>
		<decision name="has duplicates?" expression="#{CantiereAction.checkDuplicates(Cantiere)}">
		<transition to="link unlink" name="false"></transition>
		<transition to="warning popup" name="true"></transition>
	</decision>

	<task-node name="warning popup">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_home/CORE/FORMS/popup/cantiereDuplicato_popup')}"></action>
		</event>
		<transition to="duplicate?"></transition>
	</task-node>

	<node name="setIsNotifica">
		<event type="node-enter">
			<action name="1" expression="#{(ProtocolloAction.temporary['notificaCantiere']!=null and ProtocolloAction.temporary['notificaCantiere']?Cantiere.setNotifica(true):Cantiere.setNotifica(false))}"></action>
		</event>
		<transition to="edit cantiere"></transition>
	</node>

	<node name="setReadOnlyIf">
		<event type="node-enter">
			<action name="1" expression="#{(Cantiere.notifica and (empty ProtocolloAction.temporary['editNotifica'] or not Cantiere.pncForced)) or userBean.hasRoleIn('VisualizzatoreNotifiche')?processManager.setReadOnly(true):processManager.setReadOnly(false)}"></action>
			<action name="2" expression="#{CommittenteAction.equal.remove('cantiere.internalId')}"></action>
			<action name="3" expression="#{PersoneCantiereAction.equal.remove('cantiere.internalId')}"></action>
			<action name="4" expression="#{DitteCantiereAction.equal.remove('cantiere.internalId')}"></action>
			<action name="5" expression="#{TagCantiereAction.equal.remove('cantiere.internalId')}"></action>
			<action name="6" expression="#{Cantiere.titoloIV eq null?Cantiere.setTitoloIV(true):''}"></action>
		</event>
		<transition to="read stuff"></transition>
	</node>

	<decision name="duplicate?" expression="#{(button.getMnemonic())}">
		<transition to="resetMnemonic" name="yes"></transition>
		<transition to="edit cantiere" name="no"></transition>
		<transition to="edit cantiere" name="BtnCancel"></transition>
		<transition to="resetMnemonic" name="BtnSave"></transition>
	</decision>

	<super-state name="super-state3">
		<node name="Clonazione cantiere">
			<event type="node-enter">
				<action name="1" expression="#{Cantiere.setLastVersion(false)}"></action>
				<action name="2" expression="#{CantiereAction.inject(CantiereAction.copy(Cantiere))}"></action>
				<action name="3" expression="#{Cantiere.setLastVersion(true)}"></action>
				<action name="4" expression="#{CantiereAction.create()}"></action>
				<action name="5" expression="#{CantiereAction.closeAllPreviousVersionsOf(Cantiere)}"></action>
			</event>
			<transition to="../end-state2"></transition>
		</node>
	</super-state>

	<node name="Add temporary">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.temporary.put('personManagement',true)}"></action>
			<action name="2" expression="#{ProcpraticheAction.temporary.put('completed', true)}"></action>
			<action name="3" expression="#{ProcpraticheAction.temporary.put('nullified', true)}"></action>
			<action name="4" expression="#{ProcpraticheAction.temporary.put('held', true)}"></action>
			<action name="5" expression="#{processManager.setReadOnly(false)}"></action>
		</event>
		<transition to="Gestione pratiche"></transition>
	</node>

	<process-state name="Gestione pratiche">
		<sub-process name="MOD_home/CORE/PROCESSES/procpratiche" binding="late"></sub-process>
		<transition to="Remove temporary"></transition>
	</process-state>

	<node name="Remove temporary">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.temporary.put('personManagement', false)}"></action>
			<action name="2" expression="#{ProcpraticheAction.temporary.put('completed', false)}"></action>
			<action name="3" expression="#{ProcpraticheAction.temporary.put('nullified', false)}"></action>
			<action name="4" expression="#{ProcpraticheAction.temporary.put('held', false)}"></action>
			<action name="5" expression="#{Cantiere.notifica?processManager.setReadOnly(true):processManager.setReadOnly(false)}"></action>
		</event>
		<transition to="edit cantiere"></transition>
	</node>

	<node name="CheckPratiche bypassato in quanto deprecato">
		<event type="node-enter">
			<action name="1" expression="#{CantiereAction.checkPratiche(Cantiere.internalId)}"></action>
		</event>
		<transition to="edit cantiere"></transition>
	</node>

	<decision name="notifica?" expression="#{(ProtocolloAction.temporary['notificaCantiere']!=null and ProtocolloAction.temporary['notificaCantiere'])}">
		<transition to="edit cantiere" name="false"></transition>
		<transition to="refresh lists" name="true"></transition>
	</decision>

	<node name="resetMnemonic">
		<event type="node-enter">
			<action name="1" expression="#{button.setMnemonic('BtnSave')}"></action>
		</event>
		<transition to="link unlink"></transition>
	</node>

	<node name="set temporary">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.temporary.put('search',true)}"></action>
		</event>
		<transition to="end-state2"></transition>
	</node>

	<node name="ejectDeleted">
		<event type="node-enter">
			<action name="1" expression="#{CantiereAction.eject()}"></action>
		</event>
		<transition to="end-state2"></transition>
	</node>

	<node name="set cantiere temporary">
		<event type="node-enter">
			<action name="1" expression="#{CantiereAction.temporary.put('createNew',true)}"></action>
			<action name="2" expression="#{Cantiere.setTitoloIV(true)}"></action>
		</event>
		<transition to="inject new"></transition>
	</node>

	<process-state name="notificheCantieri">
		<sub-process name="MOD_Cantieri/PROCESSES/Utility/notifichePnc" binding="late"></sub-process>
		<transition to="edit cantiere"></transition>
	</process-state>

	<super-state name="super-state4">
		<node name="Clonazione Cantiere Immediate">
			<event type="node-enter">
				<action name="1" expression="#{CantiereAction.temporary.put('clonaImmediate',true)}"></action>
				<action name="2" expression="#{CantiereAction.inject(CantiereAction.cloneUntilEditable(Cantiere))}"></action>
			</event>
			<transition to="../setReadOnlyIf"></transition>
		</node>
	</super-state>

	<node name="set update addr">
		<event type="node-enter">
			<action name="1" expression="#{operation.type eq 'Edit' ? ProtocolloAction.temporary.put('updateAddrOp', true) : ''}"></action>
		</event>
		<transition to="setReadOnlyIf"></transition>
	</node>


	<end-state name="end-state2"></end-state>


</process-definition>