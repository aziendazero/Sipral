package com.phi.rest;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.activation.MimetypesFileTypeMap;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.artofsolving.jodconverter.OfficeDocumentConverter;
import org.artofsolving.jodconverter.document.DocumentFormat;
import org.artofsolving.jodconverter.office.DefaultOfficeManagerConfiguration;
import org.artofsolving.jodconverter.office.OfficeManager;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.security.Restrict;

import com.phi.cs.CatalogPersistenceManagerImpl;
import com.phi.cs.vocabulary.Vocabularies;
import com.phi.cs.vocabulary.VocabulariesImpl;
import com.phi.entities.actions.AlfrescoDocumentAction;
import com.phi.entities.actions.ProcpraticheAction;
import com.phi.entities.actions.ProtocolloAction;
import com.phi.entities.baseEntity.AlfrescoDocument;
import com.phi.entities.dataTypes.CodeValuePhi;
import com.phi.odt.OdtEngine;

import freemarker.template.TemplateException;

@Restrict("#{identity.isLoggedIn(false)}")
@Name("ReportRest")
@Path("/reports")
public class ReportRest {
	
	protected static final Logger log = Logger.getLogger(ReportRest.class);
	
	//jodconverter 3.0 beta, see: https://github.com/mirkonasato/jodconverter
	
	private static final DefaultOfficeManagerConfiguration configuration = new DefaultOfficeManagerConfiguration();
	private static OfficeManager officeManager;
	private static OfficeDocumentConverter documentConverter;
	
	private void initDocumentConverter() {
		
		if (documentConverter == null) {
			try {
				//jodconverter initialization:
				String home = System.getProperty("office.home");
				if (home != null && !home.isEmpty()) {
					configuration.setOfficeHome(home);
				} else {
					log.error("System property office.home not configured!");
				}
				
				int port;
				try {
					port = Integer.parseInt((System.getProperty("office.port")));
					configuration.setPortNumber(port);
				} catch (Exception e) {
					log.error("System property office.port not configured!");
				}

				officeManager = configuration.buildOfficeManager();
				officeManager.start();
				
				documentConverter = new OfficeDocumentConverter(officeManager);
			} catch (Exception e) {
				log.error("Error initializiong jod converter: " + configuration.toString(), e);
				if (officeManager != null) {
					officeManager.stop();
				}
			}
		}
	}
	
	/**
	 * Generate report from template
	 * @param templateName name of the template
	 * @return report generated by filling variables with conversation data 
	 */
	@GET
	//@Path("/{templateName}/{format}")
	//public Response generateFromTemplate(@PathParam("templateName") String templateName, @PathParam("format") String format) {
	@Path("/{type}/{storeId}/{nodeId}/{format}")
	public Response generateFromTemplate(
			@PathParam("type") String type, 
			@PathParam("storeId") String storeId, 
			@PathParam("nodeId") String nodeId, 
			@PathParam("format") String format) {
		
		ResponseBuilder responseBuilder = null;
		
		String nodeRef = type + "/" + storeId + "/" + nodeId;
		
		try {
//			CatalogAdapter ca = CatalogPersistenceManagerImpl.instance(); 
//			
//			Criteria alfDocCrit = ca.createCriteria(AlfrescoDocument.class);
//			
//			alfDocCrit.add(Restrictions.eq("isTemplate", true));
//			alfDocCrit.add(Restrictions.eq("name", templateName));
//			
//			List<Long> sdlocIds = UserBean.instance().getSdLocs();
//			if (sdlocIds != null && !sdlocIds.isEmpty()) {
//				alfDocCrit.add(Restrictions.or(Restrictions.isNull("serviceDeliveryLocation.internalId"), Restrictions.in("serviceDeliveryLocation.internalId", sdlocIds)));
//			}
//			
//			@SuppressWarnings("unchecked")
//			List<AlfrescoDocument> alfDocs = alfDocCrit.list();
//
//			AlfrescoDocument alfDoc = null;
//			
//			if (alfDocs.size() == 1) {
//				alfDoc = alfDocs.get(0);
//			} else if (alfDocs.size() == 0) {
//				log.error("Template with name " + templateName + " not found.");
//				responseBuilder = Response.status(Response.Status.NOT_FOUND).entity("Template with name " + templateName + " not found.");
//				responseBuilder.type(MediaType.TEXT_PLAIN);
//				return responseBuilder.build();
//			} else if (alfDocs.size() > 1) {
//				for (AlfrescoDocument doc : alfDocs) {
//					if (doc.getServiceDeliveryLocation() != null && sdlocIds.contains(doc.getServiceDeliveryLocation().getInternalId())) {
//						alfDoc = doc;
//						break;
//					}
//				}
//				if (alfDoc == null) {
//					log.error("More than one template with name " + templateName + " found.");
//					responseBuilder = Response.status(Response.Status.NOT_FOUND).entity("More than one template with name " + templateName + " found.");
//					responseBuilder.type(MediaType.TEXT_PLAIN);
//					return responseBuilder.build();
//				}
//			}
//			
//			byte[] odtBarr = AlfrescoDocumentAction.instance().generateFromTemplate(alfDoc.getNodeRefUrl());
			
			OdtEngine odtE = OdtEngine.instance();
			AlfrescoDocumentAction alfDocAction = AlfrescoDocumentAction.instance();
			
			byte[] templateBytes = alfDocAction.alfrescoGet(nodeRef);
			
			byte[] odtBarr = odtE.generateFromTemplate(templateBytes, "ULSS");
			
//			InputStream odtIs = AlfrescoDocumentAction.instance().getFromAlfresco(alfDoc.getNodeRefUrl());
//
//			ByteArrayOutputStream odtOs = new ByteArrayOutputStream();
//
//			DocumentTemplateFactory documentTemplateFactory = new DocumentTemplateFactory();
//			DocumentTemplate template = documentTemplateFactory.getTemplate(odtIs);
//
//			template.createDocument(getModel(), odtOs);
				
			if ("ODT".equals(format)) {
				
				responseBuilder = Response.ok(odtBarr);
				responseBuilder.type("application/vnd.oasis.opendocument.text");
				
			} else if ("PDF".equals(format)) {
				
				byte[] pdfBarr = odtToPdf(odtBarr);
				
				responseBuilder = Response.ok(pdfBarr);
				responseBuilder.type("application/pdf");
			}
		} catch (Exception e) {
			String instructionStack = "";
			if (e.getCause() != null && e.getCause() instanceof TemplateException) {
				instructionStack = ((TemplateException)e.getCause()).getFTLInstructionStack();
			}
			log.error("Error generating report " + nodeRef + " format: " + format + "\r\n" + instructionStack, e);
			responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Error generating report " + nodeRef + " format: " + format + " " + e.getMessage() + "\r\n" + instructionStack);
			responseBuilder.type(MediaType.TEXT_PLAIN);
		}
		return responseBuilder.build();
	}
	
	@GET
	//@Path("{nodeRef}")
	@Path("{type}/{storeId}/{nodeId}")
	@Produces("application/pdf")
	public Response generatePdf(/*@PathParam("nodeRef") String nodeRef */
			@PathParam("type") String type, 
			@PathParam("storeId") String storeId, 
			@PathParam("nodeId") String nodeId ) {
		
		ResponseBuilder responseBuilder = null;
		
		String nodeRef = type + "/" + storeId + "/" + nodeId;
		
		try {

			byte[] bytes = AlfrescoDocumentAction.instance().alfrescoGet(nodeRef);

			byte[] pdfBarr = odtToPdf(bytes);
			
			responseBuilder = Response.ok(pdfBarr);
			
		} catch (Exception e) {
			log.error("Error generating pdf from document " + nodeRef, e);
			responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Error generating pdf from document " + nodeRef + " " + e.getMessage());
			responseBuilder.type(MediaType.TEXT_PLAIN);
		}
		return responseBuilder.build();
	}
	
	/**
	 * Upload zip 
	 * Unpack zip and upload each file to alfresco repository into destination folder
	 * @param req multipart file upload of zip
	 * @return ok
	 */
	@POST
	@Path("/upload")
	public Response upload(@Context HttpServletRequest req) {

		ResponseBuilder responseBuilder = null;

		try {

			FileItemFactory factory = new DiskFileItemFactory();
			ServletFileUpload upload = new ServletFileUpload(factory);

			List<FileItem> items = upload.parseRequest(req);
			Iterator<FileItem> iter = items.iterator();

			String folderNodeRef = null;
			String folder = null;
			boolean isTemplate = false;
			
			InputStream inStr = null;

			while (iter.hasNext()) {
				FileItem item = (FileItem) iter.next();

				if (item.isFormField()) {

					if ("destination".equals(item.getFieldName())) {
						folderNodeRef = item.getString();
					} else if ("folder".equals(item.getFieldName())) {
						folder = item.getString();
					} else if ("p:isTemplate".equals(item.getFieldName())) {
						if ("true".equals(item.getString())) {
							isTemplate = true;
						}
					}

				} else {
					inStr = item.getInputStream();
				}
			}
			
			if (inStr == null) {
				throw new IllegalArgumentException("No file part");
			}
			
			if (folderNodeRef == null) {
				throw new IllegalArgumentException("No destination part");
			}

			AlfrescoDocumentAction docAction = AlfrescoDocumentAction.instance();		
			ProcpraticheAction procpraticheAction = ProcpraticheAction.instance();		
			ProtocolloAction protocolloAction = ProtocolloAction.instance();	
			Vocabularies voc = VocabulariesImpl.instance();

			ZipInputStream zis = new ZipInputStream(inStr);
			ZipEntry ze = zis.getNextEntry();
			
			MimetypesFileTypeMap mime = new MimetypesFileTypeMap();

			while(ze!=null){

			   String fileName = ze.getName();

			   byte[] document = IOUtils.toByteArray(zis);
			   
			   String mimeType = mime.getContentType(ze.getName());
			   
			   if (ze.getName().endsWith(".odt")) {
				   mimeType = "application/vnd.oasis.opendocument.text";
			   }
			   
			   String nodeRef = docAction.alfrescoUploadNew(document, folderNodeRef, fileName);
			   
			   if (nodeRef != null) {
			   
				   AlfrescoDocument aDoc = new AlfrescoDocument();
				   
				   aDoc.setName(fileName);
				   aDoc.setNodeRef(nodeRef);
				   aDoc.setMimeType(mimeType);
				   aDoc.setPath(folder);
				   aDoc.setIsTemplate(isTemplate);
				   
				   if (isTemplate) {
					   CodeValuePhi type;
					   if (fileName.startsWith("AE ")) {
						   type = (CodeValuePhi)voc.getCodeValue("PHIDIC", "ReportType", "ElementarActivity", null);
					   } else if (fileName.startsWith("ISL ")) {
						   type = (CodeValuePhi)voc.getCodeValue("PHIDIC", "ReportType", "Workaccident", null);
					   } else if (fileName.startsWith("MP ")) {
						   type = (CodeValuePhi)voc.getCodeValue("PHIDIC", "ReportType", "Workdisease", null);
					   } else if (fileName.startsWith("P ")) {
						   type = (CodeValuePhi)voc.getCodeValue("PHIDIC", "ReportType", "Measure", null);
					   } else {
						   type = (CodeValuePhi)voc.getCodeValue("PHIDIC", "ReportType", "Generic", null);
					   }
					   aDoc.setType(type);
				   } else {
					   if (procpraticheAction.getEntity() != null) {
						   procpraticheAction.link("documenti", aDoc);
					   } else if (protocolloAction.getEntity() != null) {
						   protocolloAction.link("documenti", aDoc);
					   }
				   }
				   
				   docAction.create(aDoc);
			   
			   }
			   
			   zis.closeEntry();
			   ze = zis.getNextEntry();
			}
			
			zis.close();
			
			CatalogPersistenceManagerImpl.instance().flushSession();

			responseBuilder = Response.ok();

		} catch (Exception e) {
			log.error("Error uploading file " + e.getMessage(), e);
			responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Error uploading file " + e.getMessage() + " " + e.getMessage());
			responseBuilder.type(MediaType.TEXT_PLAIN);
		}
		return responseBuilder.build();
	}

	/**
	 * Convert odf into pdf
	 * 
	 * using: 
	 * <groupId>org.artofsolving.jodconverter</groupId>
	 * <artifactId>jodconverter-core</artifactId>
	 * <version>3.0-beta-4-jahia2</version>
	 * 
	 * Requires running Open Office installed as a service: 
	 * soffice -headless -accept="socket,host=127.0.0.1,port=8100;urp;" -nofirststartwizard
	 * 
	 * and jboss must be started with params:
	 * -Doffice.home="C:\Program Files\LibreOffice 5" -Doffice.port=8100
	 * 
	 * @param in byte array of odt
	 * @return byte array of pdf
	 * @throws Exception
	 */
	public byte[] odtToPdf(byte[] in) throws Exception {
		
		try {

			initDocumentConverter();
			
            DocumentFormat outputFormat = documentConverter.getFormatRegistry().getFormatByExtension("pdf");

            File inFile = File.createTempFile("inTemp", ".odf");
            File outFile = File.createTempFile("outTemp", ".pdf");
            
            FileUtils.writeByteArrayToFile(inFile, in);
            
            documentConverter.convert(inFile, outFile, outputFormat);
            
            byte[] res = IOUtils.toByteArray(new FileInputStream(outFile));
            
            inFile.delete();
            outFile.delete();
            
            return res;

		} catch (Exception e) {
			log.error("Error converting ODT to PDF", e);
			throw e;
		}
		
	}

	
//	/**
//	 * Convert odf into pdf
//	 * 
//	 * using: 
//	 * <groupId>fr.opensagres.xdocreport</groupId>
//	 * <artifactId>org.odftoolkit.odfdom.converter.pdf</artifactId>
//	 * <version>1.0.6</version>
//	 * 
//	 * without Open office, but quality isn't perfect 
//	 * and doesent support footNote or hyperlink into footer or header
//	 * 
//	 * @param in
//	 * @return
//	 * @throws Exception
//	 */
//	private ByteArrayOutputStream odtToPdf(InputStream in) throws Exception {
//		
//		try {
//			OdfTextDocument document = OdfTextDocument.loadDocument(in);
//	
//			ByteArrayOutputStream out = new ByteArrayOutputStream();
//	        PdfOptions options = PdfOptions.create();
//	        PdfConverter.getInstance().convert( document, out, options );
//	        
//	        return out;
//	        
//		} catch (Exception e) {
//			log.error("Error converting ODT to PDF", e);
//			throw e;
//		}
//		
//	}
}