<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="gestioneOperatori">


	<start-state name="start-state1">
		<transition to="select"></transition>
	</start-state>


	<node name="read operatori ARPAV">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.orderBy.put('name.fam','ascending')}"></action>
			<action name="2" expression="#{OperatoreAction.orderBy.put('name.giv','ascending')}"></action>
			<action name="3" expression="#{OperatoreAction.equal.put('ente.code','ARPAV')}"></action>
			<action name="4" expression="#{OperatoreAction.setArpav()}"></action>
			<action name="5" expression="#{OperatoreAction.setReadPageSize(10000)}"></action>
			<action name="6" expression="#{OperatoreAction.filterActive()}"></action>
			<action name="7" expression="#{OperatoreAction.read()}"></action>
		</event>
		<transition to="Operatori"></transition>
	</node>

	<task-node name="Operatori">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_Employees/CORE/FORMS/operatoriARPAV')}"></action>
		</event>
		<transition to="Button?"></transition>
	</task-node>

	<decision name="Button?" expression="#{(button.getMnemonic())}">
		<transition to="New Entity 1" name="BtnOperatoreIn"></transition>
		<transition to="Create Operatore UI" name="BtnOperatoreMng"></transition>
		<transition to="New Entity 2" name="BtnOperatoreOut"></transition>
		<transition to="ejectOP" name="BtnBack"></transition>
		<transition to="end-state2" name="BtnSave"></transition>
		<transition to="read operatori ARPAV" name="BtnOperatoreSearch"></transition>
		<transition to="Clean Restriction" name="BtnCleanRestrictions"></transition>
		<transition to="Del PopUp" name="BtnDel"></transition>
	</decision>

	<node name="setTemporary">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.temporary.put('search',true)}"></action>
		</event>
		<transition to="Search Employee"></transition>
	</node>

	<process-state name="Search Employee">
		<sub-process name="MOD_Employees/CORE/PROCESSES/ManageMulti" binding="late"></sub-process>
		<transition to="removeTemporary"></transition>
	</process-state>

	<decision name="Button2?" expression="#{(button.getMnemonic())}">
		<transition to="eject new" name="BtnBack"></transition>
		<transition to="SearchExisting" name="BtnSave"></transition>
	</decision>

	<node name="Create Operatore form Employee">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.setFromEmployee(Employee, 'ARPAV')}"></action>
		</event>
		<transition to="Read ARPAV"></transition>
	</node>

	<task-node name="Create Operatore UI">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setViewId('/MOD_Employees/CORE/FORMS/operatoreARPAV')}"></action>
		</event>
		<transition to="Button3?"></transition>
	</task-node>

	<super-state name="super-state1">
		<node name="Save Operatore">
			<event type="node-enter">
				<action name="1" expression="#{OperatoreAction.create()}"></action>
			</event>
			<transition to="../Create Operatore UI"></transition>
		</node>
	</super-state>

	<node name="New Entity 1">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.inject(OperatoreAction.newEntity())}"></action>
		</event>
		<transition to="setTemporary"></transition>
	</node>

	<node name="New Entity 2">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.eject()}"></action>
			<action name="2" expression="#{OperatoreAction.inject(OperatoreAction.newEntity())}"></action>
			<action name="3" expression="#{Operatore.setEnte(vocabularies.getCodeValue('PHIDIC', 'Ente', 'ARPAV', 'C'))}"></action>
		</event>
		<transition to="Read ARPAV"></transition>
	</node>

	<decision name="Button3?" expression="#{(button.getMnemonic())}">
		<transition to="select" name="BtnBack"></transition>
		<transition to="super-state1/Save Operatore" name="BtnSave"></transition>
		<transition to="Select ARPAV" name="BtnAddARPAV"></transition>
	</decision>

	<process-state name="Select ARPAV">
		<sub-process name="MOD_HBS/CORE/PROCESSES/Search ULSS" binding="late"></sub-process>
		<transition to="Button4?"></transition>
	</process-state>

	<node name="Link ARPAV">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.link('serviceDeliveryLocation',ServiceDeliveryLocation)}"></action>
		</event>
		<transition to="Create Operatore UI"></transition>
	</node>

	<decision name="Button4?" expression="#{(button.getMnemonic())}">
		<transition to="Link ARPAV" name="BtnSave"></transition>
		<transition to="Create Operatore UI" name="BtnBack"></transition>
	</decision>

	<node name="Refresh List">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.ejectList()}"></action>
			<action name="2" expression="#{OperatoreAction.refresh()}"></action>
		</event>
		<transition to="read operatori ARPAV"></transition>
	</node>

	<super-state name="super-state2">
		<node name="Del Operatore">
			<event type="node-enter">
				<action name="1" expression="#{Operatore.setIsActive(false)}"></action>
				<action name="2" expression="#{OperatoreAction.create()}"></action>
			</event>
			<transition to="../Refresh List"></transition>
		</node>
	</super-state>

	<node name="Clean Restriction">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.cleanRestrictions()}"></action>
			<action name="2" expression="#{OperatoreAction.temporary.clear()}"></action>
		</event>
		<transition to="select"></transition>
	</node>

	<task-node name="Del PopUp">
		<task>
			<assignment actor-id="#{userBean.username}"></assignment>
		</task>
		<event type="node-enter">
			<action name="main" expression="#{ViewManager.setPopupViewId('/MOD_home/CORE/FORMS/popup/Del_OP_alert')}"></action>
		</event>
		<transition to="Button5?"></transition>
	</task-node>

	<decision name="Button5?" expression="#{(button.getMnemonic())}">
		<transition to="Refresh List" name="BtnCancel"></transition>
		<transition to="super-state2/Del Operatore" name="BtnSave"></transition>
	</decision>

	<node name="SearchExisting">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.equal.put('employee',Employee)}"></action>
			<action name="2" expression="#{OperatoreAction.equal.put('isActive',true)}"></action>
			<action name="3" expression="#{OperatoreAction.read()}"></action>
		</event>
		<transition to="Existing?"></transition>
	</node>

	<decision name="Existing?" expression="#{OperatoreList.size()&gt;0}">
		<transition to="Inject First" name="true"></transition>
		<transition to="new" name="false"></transition>
	</decision>

	<node name="Inject First">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.injectFirst(OperatoreList)}"></action>
			<action name="2" expression="#{OperatoreAction.ejectList()}"></action>
			<action name="3" expression="#{OperatoreAction.temporary.put('existing', true)}"></action>
		</event>
		<transition to="Read ARPAV"></transition>
	</node>

	<node name="new">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.temporary.put('existing', false)}"></action>
		</event>
		<transition to="Create Operatore form Employee"></transition>
	</node>

	<node name="select">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.cleanRestrictions()}"></action>
			<action name="2" expression="#{OperatoreAction.select.add('internalId')}"></action>
			<action name="3" expression="#{OperatoreAction.select.add('isNew')}"></action>
			<action name="4" expression="#{OperatoreAction.select.add('isActive')}"></action>
			<action name="5" expression="#{OperatoreAction.select.add('name.fam')}"></action>
			<action name="6" expression="#{OperatoreAction.select.add('name.giv')}"></action>
			<action name="7" expression="#{OperatoreAction.select.add('code')}"></action>
			<action name="8" expression="#{OperatoreAction.select.add('ente')}"></action>
			<action name="9" expression="#{OperatoreAction.select.add('employee.internalId')}"></action>
			<action name="10" expression="#{OperatoreAction.select.add('employee.upg')}"></action>
			<action name="11" expression="#{OperatoreAction.select.add('serviceDeliveryLocation.internalId')}"></action>
			<action name="12" expression="#{OperatoreAction.select.add('serviceDeliveryLocation.name.giv')}"></action>
			<action name="13" expression="#{OperatoreAction.select.add('serviceDeliveryLocation.organization.id')}"></action>
		</event>
		<transition to="read operatori ARPAV"></transition>
	</node>

	<node name="Read ARPAV">
		<event type="node-enter">
			<action name="1" expression="#{ServiceDeliveryLocationAction.equal.put('code.code','arpav')}"></action>
			<action name="2" expression="#{ServiceDeliveryLocationAction.read()}"></action>
		</event>
		<transition to="Set ARPAV?"></transition>
	</node>

	<decision name="Set ARPAV?" expression="#{ServiceDeliveryLocationList.size()==1}">
		<transition to="Create Operatore UI" name="false"></transition>
		<transition to="Set ARPAV" name="true"></transition>
	</decision>

	<node name="Set ARPAV">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.link('serviceDeliveryLocation',ServiceDeliveryLocationList.get(0))}"></action>
		</event>
		<transition to="Create Operatore UI"></transition>
	</node>

	<node name="removeTemporary">
		<event type="node-enter">
			<action name="1" expression="#{ProtocolloAction.temporary.remove('search')}"></action>
		</event>
		<transition to="Button2?"></transition>
	</node>

	<node name="ejectOP">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.eject()}"></action>
		</event>
		<transition to="end-state1"></transition>
	</node>

	<node name="eject new">
		<event type="node-enter">
			<action name="1" expression="#{OperatoreAction.eject()}"></action>
		</event>
		<transition to="Operatori"></transition>
	</node>


	<end-state name="end-state1"></end-state>

	<end-state name="end-state2"></end-state>
	
	<action name="security" expression="admin;direttore;"></action> 
	


</process-definition>