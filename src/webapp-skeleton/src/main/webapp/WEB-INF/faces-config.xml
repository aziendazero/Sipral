<?xml version="1.0" encoding="UTF-8"?>
<faces-config version="1.2"
              xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd">

		<application>
			<!-- tell JSF to use Facelets -->
			<view-handler>com.sun.facelets.FaceletViewHandler</view-handler>
			<!-- use RimResolver to browse Rim objects -->
			<el-resolver>com.phi.el.RimResolver</el-resolver>
			
			<resource-bundle>
				<base-name>${phi.solution.labels}</base-name>
				<var>msg</var>
			</resource-bundle>
			<resource-bundle>
				<base-name>bundle.static.messages</base-name>
				<var>static</var>
			</resource-bundle>
			<resource-bundle>
				<base-name>bundle.error.messages</base-name>
				<var>error</var>
			</resource-bundle>
			<resource-bundle>
				<base-name>bundle.format.messages</base-name>
				<var>format</var>
			</resource-bundle>
			<locale-config>
				<default-locale>en</default-locale>
				<supported-locale>it</supported-locale>
				<supported-locale>de</supported-locale>
			</locale-config>
		</application>
		
		<render-kit>
		    <renderer>
		        <component-family>javax.faces.SelectMany</component-family>
		        <renderer-type>javax.faces.Listbox</renderer-type>
		        <renderer-class>com.phi.cs.view.renderer.PhiListboxRenderer</renderer-class>
		    </renderer>
		    <renderer>
		        <component-family>javax.faces.SelectMany</component-family>
		        <renderer-type>javax.faces.Checkbox</renderer-type>
		        <renderer-class>com.phi.cs.view.renderer.PhiSelectManyCheckboxListRenderer</renderer-class>
		    </renderer>
		</render-kit>
		
		<!-- FACES STANDARD CONVERTERS -->
		<converter>
			<!-- Converter implementation for java.math.BigDecimal values -->
			<description>Big Decimal Converter</description>
			<converter-id>BigDecimalConverter</converter-id>
			<converter-class>javax.faces.convert.BigDecimalConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.math.BigInteger values -->
			<description>Big Integer Converter</description>
			<converter-id>BigIntegerConverter</converter-id>
			<converter-class>javax.faces.convert.BigIntegerConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Boolean (and boolean primitive) values -->
			<description>Boolean Converter</description>
			<converter-id>BooleanConverter</converter-id>
			<converter-class>javax.faces.convert.BooleanConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Byte (and byte primitive) values -->
			<description>Byte Converter</description>
			<converter-id>ByteConverter</converter-id>
			<converter-class>javax.faces.convert.ByteConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Character (and char primitive) values -->
			<description>Character Converter</description>
			<converter-id>CharacterConverter</converter-id>
			<converter-class>javax.faces.convert.CharacterConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Number values -->
			<description>Convert Number</description>
			<converter-id>ConvertNumber</converter-id>
			<converter-class>javax.faces.convert.NumberConverter</converter-class>
			<property>
			  <property-name>maximumFractionDigits</property-name>
			  <property-class>java.lang.Integer</property-class>
			</property>
			<property>
			  <property-name>minimumFractionDigits</property-name>
			  <property-class>java.lang.Integer</property-class>
			</property>
			<property>
			  <property-name>locale</property-name>
			  <property-class>java.util.Locale</property-class>
			</property>
			<property>
			  <property-name>groupingUsed</property-name>
			  <property-class>java.lang.Boolean</property-class>
			</property>
			<!-- property>
			  <property-name>currencySymbol</property-name>
			  <property-class>java.lang.String</property-class>
			</property>
			<property>
			  <property-name>currencyCode</property-name>
			  <property-class>java.util.Currency</property-class>
			</property-->
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Double (and double primitive) values -->
			<description>Double Converter</description>
			<converter-id>DoubleConverter</converter-id>
			<converter-class>com.phi.cs.view.converter.DoubleConverter</converter-class>
			<property>
			  <property-name>maximumFractionDigits</property-name>
			  <property-class>java.lang.Integer</property-class>
			</property>
			<property>
			  <property-name>minimumFractionDigits</property-name>
			  <property-class>java.lang.Integer</property-class>
			</property>
			<property>
			  <property-name>locale</property-name>
			  <property-class>java.util.Locale</property-class>
			</property>
			<property>
			  <property-name>groupingUsed</property-name>
			  <property-class>java.lang.Boolean</property-class>
			</property>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Float (and float primitive) values -->
			<description>Float Converter</description>
			<converter-id>FloatConverter</converter-id>
			<converter-class>com.phi.cs.view.converter.FloatConverter</converter-class>
			<property>
			  <property-name>maximumFractionDigits</property-name>
			  <property-class>java.lang.Integer</property-class>
			</property>
			<property>
			  <property-name>minimumFractionDigits</property-name>
			  <property-class>java.lang.Integer</property-class>
			</property>
			<property>
			  <property-name>locale</property-name>
			  <property-class>java.util.Locale</property-class>
			</property>
			<property>
			  <property-name>groupingUsed</property-name>
			  <property-class>java.lang.Boolean</property-class>
			</property>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Integer (and int primitive) values -->
			<description>Integer Converter</description>
			<converter-id>IntegerConverter</converter-id>
			<converter-class>javax.faces.convert.IntegerConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Long (and long primitive) values -->
			<description>Long Converter</description>
			<converter-id>LongConverter</converter-id>
			<converter-class>javax.faces.convert.LongConverter</converter-class>
		</converter>
		<converter>
			<!-- Converter implementation for java.lang.Short (and short primitive) values -->
			<description>Short Converter</description>
			<converter-id>ShortConverter</converter-id>
			<converter-class>javax.faces.convert.ShortConverter</converter-class>
		</converter>
		
		<!-- PHI CONVERTERS -->
		<converter>
			<!-- Converts CodeValue to ID String and vice-versa -->
			<description>Code Value Converter</description>
			<converter-id>CodeValueConverter</converter-id>
			<converter-class>com.phi.cs.view.converter.CodeValueConverter</converter-class>
		</converter>
		<converter>
			<!-- Converts JPA entity to entityName-id and vice-versa -->
			<description>Entity Converter</description>
			<converter-id>EntityConverter</converter-id>
			<converter-class>com.phi.cs.view.converter.EntityConverter</converter-class>
		</converter>
		<converter>
			<!-- Converts entity string of type entityName-id to id -->
			<description>Sdl To Id Converter</description>
			<converter-id>SdlToIdConverter</converter-id>
			<converter-class>com.phi.cs.view.converter.SdlToIdConverter</converter-class>
		</converter>

		<!-- PHI VALIDATORS -->
		<validator>
			<description>Numbers Only Validator</description>
			<validator-id>NumbersOnlyValidator</validator-id>
			<validator-class>com.phi.cs.validators.NumbersOnlyValidator</validator-class>
		</validator>
		<validator>
			<description>Checked Validator</description>
			<validator-id>CheckedValidator</validator-id>
			<validator-class>com.phi.cs.validators.CheckedValidator</validator-class>
		</validator>
		<validator>
			<description>Date Only Validator</description>
			<validator-id>DateOnlyValidator</validator-id>
			<validator-class>com.phi.cs.validators.DateOnlyValidator</validator-class>
		</validator>
		<validator>
			<description>Hours Minutes Validator</description>
			<validator-id>HoursMinutesValidator</validator-id>
			<validator-class>com.phi.cs.validators.HoursMinutesValidator</validator-class>
		</validator>
		<validator>
			<description>Letters Only Validator</description>
			<validator-id>LettersOnlyValidator</validator-id>
			<validator-class>com.phi.cs.validators.LettersOnlyValidator</validator-class>
		</validator>
		<!--Dictionary manager validators-->
		<validator>
			<description>Letters Number No Space Validator</description>
			<validator-id>LettersNumberNoSpaceValidator</validator-id>
			<validator-class>com.phi.cs.validators.LetterNumberNoSpaceValidator</validator-class>
		</validator>
		<validator>
			<description>Dictionary Consistency Validator</description>
			<validator-id>DictionaryConsistencyValidator</validator-id>
			<validator-class>com.phi.cs.validators.DictionaryConsistencyValidator</validator-class>
		</validator>
		<validator>
			<description>Code Value Date Validator</description>
			<validator-id>CodeValueDateValidator</validator-id>
			<validator-class>com.phi.cs.validators.CodeValueDateValidator</validator-class>
		</validator>
		<!--END Dictionary manager validators-->
		<validator>
			<description>Mail Address Validator</description>
			<validator-id>MailAddressValidator</validator-id>
			<validator-class>com.phi.cs.validators.MailAddressValidator</validator-class>
		</validator>
		<validator>
			<description>Italian National Identification Number No UID</description>
			<validator-id>ItalianNationalIdentificationNumberNoUID</validator-id>
			<validator-class>com.phi.cs.validators.NationalIdentificationNumberNoUIDValidator</validator-class>
		</validator>
		<validator>
			<description>Italian National Identification Number</description>
			<validator-id>ItalianNationalIdentificationNumber</validator-id>
			<validator-class>com.phi.cs.validators.NationalIdentificationNumberValidator</validator-class>
		</validator>
		<validator>
			<description>Partita Iva No UID</description>
			<validator-id>PartitaIvaNoUID</validator-id>
			<validator-class>com.phi.cs.validators.PartitaIvaNoUIDValidator</validator-class>
		</validator>
		<validator>
			<description>Partita Iva</description>
			<validator-id>PartitaIva</validator-id>
			<validator-class>com.phi.cs.validators.PartitaIvaValidator</validator-class>
		</validator>
		<validator>
			<description>Search Control Validator</description>
			<validator-id>SearchControlValidator</validator-id>
			<validator-class>com.phi.cs.validators.SearchControlValidator</validator-class>
		</validator>
		<validator>
			<description>Unique Record Validator</description>
			<validator-id>UniqueRecordValidator</validator-id>
			<validator-class>com.phi.cs.validators.UniqueRecordValidator</validator-class>
		</validator>
		<validator>
			<description>Date Minor Of Today</description>
			<validator-id>DateMinorOfToday</validator-id>
			<validator-class>com.phi.cs.validators.DateMinorOfToday</validator-class>
		</validator>
		<validator>
			<description>Date Minor Equal Of Today</description>
			<validator-id>DateMinorEqualOfToday</validator-id>
			<validator-class>com.phi.cs.validators.DateMinorEqualOfToday</validator-class>
		</validator>
		<validator>
			<description>Date Major Of Today</description>
			<validator-id>DatMajorOfToday</validator-id>
			<validator-class>com.phi.cs.validators.DateMajorOfToday</validator-class>
		</validator>
		<validator>
			<description>Date Major Equal Of Today</description>
			<validator-id>DateMajorEqualOfToday</validator-id>
			<validator-class>com.phi.cs.validators.DateMajorEqualOfToday</validator-class>
		</validator>
		
		${phi.solution.faces-config}
</faces-config>
